{"version":3,"sources":["common/constants/missing-required-field-error-message.tsx","common/hooks/use-text-field-value.tsx","common/components/validated-text-field.tsx","auth/components/form.styles.tsx","auth/components/registration-form.tsx","auth/pages/registration.page.styles.tsx","auth/pages/registration.page.tsx"],"names":["missingRequiredFieldErrorMessage","useTextFieldValue","value","useState","val","setVal","e","target","ValidatedTextField","forceValidate","onValidate","onChange","onBlur","rest","checkValid","setCheckValid","errorMessage","error","undefined","helperText","useStyles","makeStyles","theme","form","display","flexDirection","gap","spacing","submitOrAltRow","justifyContent","alignItems","RegistrationForm","username","password","confirmPassword","onChangeUsername","onChangePassword","onChangeConfirmPassword","textFieldVariant","onSubmit","classes","setForceValidate","validateRequired","validator","isEmpty","validateConfirmPassword","className","noValidate","preventDefault","some","variant","label","required","inputProps","type","Button","component","Link","to","routes","login","color","content","padding","RegistrationPage","serverError","setServerError","history","useHistory","Container","Alert","severity","userService","create","then","push","catch","response","data","message"],"mappings":"yIAEeA,IAF0B,2B,sFCE1B,SAASC,EACtBC,GAEA,MAAsBC,mBAASD,GAA/B,mBAAOE,EAAP,KAAYC,EAAZ,KACA,MAAO,CACLD,EACA,SAACE,GAAD,OACED,EAAOC,EAAEC,OAAOL,W,uHCAP,SAASM,EAAT,GAMc,IAL3BC,EAK0B,EAL1BA,cACAC,EAI0B,EAJ1BA,WACAC,EAG0B,EAH1BA,SACAC,EAE0B,EAF1BA,OACGC,EACuB,kEAC1B,EAAoCV,oBAAS,GAA7C,mBAAOW,EAAP,KAAmBC,EAAnB,KACMC,EAAeN,EAAWG,EAAKX,OACrC,OACE,cAAC,IAAD,aACEe,OAAQR,GAAiBK,SAAgCI,IAAjBF,EACxCG,YAAaV,GAAiBK,IAAeE,EAC7CL,SAAU,SAACL,GACTS,GAAc,GACN,OAARJ,QAAQ,IAARA,KAAWL,IAEbM,OAAQ,SAACN,GACPS,GAAc,GACR,OAANH,QAAM,IAANA,KAASN,KAEPO,M,iCC9BV,aAEMO,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJC,QAAS,OACTC,cAAe,SACfC,IAAKJ,EAAMK,QAAQ,IAErBC,eAAgB,CACdJ,QAAS,OACTK,eAAgB,gBAChBC,WAAY,cAIDV,O,0NCYA,SAASW,EAAT,GASY,IARzBC,EAQwB,EARxBA,SACAC,EAOwB,EAPxBA,SACAC,EAMwB,EANxBA,gBACAC,EAKwB,EALxBA,iBACAC,EAIwB,EAJxBA,iBACAC,EAGwB,EAHxBA,wBAGwB,IAFxBC,wBAEwB,MAFL,WAEK,EADxBC,EACwB,EADxBA,SAEMC,EAAUpB,cAEhB,EAA0CjB,oBAAS,GAAnD,mBAAOM,EAAP,KAAsBgC,EAAtB,KAEMC,EAAmB,SAACxC,GAAD,OACvByC,IAAUC,QAAQ1C,GAASF,SAAmCkB,GAE1D2B,EAA0B,SAAC3C,GAAD,OAC9BA,IAAU+B,EAAW,+BAA4Bf,GAEnD,OACE,uBACE4B,UAAWN,EAAQjB,KACnBwB,YAAU,EACVR,SAAU,SAACjC,GACTA,EAAE0C,iBACFP,GAAiB,GAEf,CAACT,EAAUC,GAAUgB,KAAKP,IAC1BG,EAAwBX,IAI1BK,KAZJ,UAeE,cAAC,IAAD,CACEW,QAASZ,EACTa,MAAM,WACN1C,cAAeA,EACfC,WAAYgC,EACZU,UAAQ,EACRlD,MAAO8B,EACPqB,WAAY,CAAE,aAAc,YAC5B1C,SAAUwB,IAEZ,cAAC,IAAD,CACEe,QAASZ,EACTa,MAAM,WACNG,KAAK,WACLF,UAAQ,EACRlD,MAAO+B,EACPoB,WAAY,CAAE,aAAc,YAC5B1C,SAAUyB,EACV3B,cAAeA,EACfC,WAAYgC,IAEd,cAAC,IAAD,CACEQ,QAASZ,EACTa,MAAM,mBACNG,KAAK,WACLF,UAAQ,EACRlD,MAAOgC,EACPmB,WAAY,CAAE,aAAc,oBAC5B1C,SAAU0B,EACV5B,cAAeA,EACfC,WAAYmC,IAEd,sBAAKC,UAAWN,EAAQZ,eAAxB,UACE,cAAC2B,EAAA,EAAD,CAAQC,UAAWC,IAAMC,GAAIC,IAAOC,MAAOC,MAAM,UAAjD,oBAGA,cAACN,EAAA,EAAD,CAAQD,KAAK,SAASJ,QAAQ,YAAYW,MAAM,UAAhD,4B,aCxFOzC,EATGC,aAAW,SAACC,GAAD,MAAY,CACvCwC,QAAS,CACPtC,QAAS,OACTC,cAAe,SACfC,IAAKJ,EAAMK,QAAQ,GACnBoC,QAASzC,EAAMK,QAAQ,QCGZ,SAASqC,IACtB,IAAMxB,EAAUpB,IAChB,EAAqCnB,YAAkB,IAAvD,mBAAO+B,EAAP,KAAiBG,EAAjB,KACA,EAAqClC,YAAkB,IAAvD,mBAAOgC,EAAP,KAAiBG,EAAjB,KACA,EAAmDnC,YAAkB,IAArE,mBAAOiC,EAAP,KAAwBG,EAAxB,KACA,EAAsClC,mBAAS,IAA/C,mBAAO8D,EAAP,KAAoBC,EAApB,KACMC,EAAUC,cAChB,OACE,8BACE,eAACC,EAAA,EAAD,CAAWvB,UAAWN,EAAQsB,QAA9B,UACGG,GAAe,cAACK,EAAA,EAAD,CAAOC,SAAS,QAAhB,SAAyBN,IACzC,cAAClC,EAAD,CACEC,SAAUA,EACVC,SAAUA,EACVC,gBAAiBA,EACjBC,iBAAkBA,EAClBC,iBAAkBA,EAClBC,wBAAyBA,EACzBE,SAAU,WACRiC,IACGC,OAAO,CAAEzC,WAAUC,aACnByC,MAAK,kBAAMP,EAAQQ,KAAKhB,IAAOC,UAC/BgB,OAAM,SAACtE,GACW,IAAD,IAAZA,EAAEuE,SACJX,EAAc,UAAC5D,EAAEuE,gBAAH,iBAAC,EAAYC,YAAb,aAAC,EAAkBC,SAEjCb,EAAe","file":"static/js/15.fd6d4dcb.chunk.js","sourcesContent":["const missingRequiredFieldErrorMessage = 'This field is required.';\n\nexport default missingRequiredFieldErrorMessage;\n","import { useState } from 'react';\n\nexport default function useTextFieldValue(\n  value: string\n): [string, React.ChangeEventHandler<HTMLTextAreaElement | HTMLInputElement>] {\n  const [val, setVal] = useState(value);\n  return [\n    val,\n    (e: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) =>\n      setVal(e.target.value),\n  ];\n}\n","import { TextField, TextFieldProps } from '@material-ui/core';\nimport { useState } from 'react';\n\ntype ValidatedTextFieldProps = TextFieldProps & {\n  onValidate: (value: string) => string | undefined;\n  forceValidate?: boolean;\n  value: string;\n};\n\nexport default function ValidatedTextField({\n  forceValidate,\n  onValidate,\n  onChange,\n  onBlur,\n  ...rest\n}: ValidatedTextFieldProps) {\n  const [checkValid, setCheckValid] = useState(false);\n  const errorMessage = onValidate(rest.value);\n  return (\n    <TextField\n      error={(forceValidate || checkValid) && errorMessage !== undefined}\n      helperText={(forceValidate || checkValid) && errorMessage}\n      onChange={(e) => {\n        setCheckValid(true);\n        onChange?.(e);\n      }}\n      onBlur={(e) => {\n        setCheckValid(true);\n        onBlur?.(e);\n      }}\n      {...rest}\n    />\n  );\n}\n","import { makeStyles } from '@material-ui/core';\n\nconst useStyles = makeStyles((theme) => ({\n  form: {\n    display: 'flex',\n    flexDirection: 'column',\n    gap: theme.spacing(2),\n  },\n  submitOrAltRow: {\n    display: 'flex',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n  },\n}));\n\nexport default useStyles;\n","import { Button, TextFieldProps } from '@material-ui/core';\nimport { useState } from 'react';\nimport ValidatedTextField from '../../common/components/validated-text-field';\nimport missingRequiredFieldErrorMessage from '../../common/constants/missing-required-field-error-message';\nimport useStyles from './form.styles';\nimport validator from 'validator';\nimport routes from '../../router/constants/routes';\nimport { Link } from 'react-router-dom';\n\ninterface RegistrationFormProps {\n  username: string;\n  password: string;\n  confirmPassword: string;\n  onChangeUsername: React.ChangeEventHandler<\n    HTMLTextAreaElement | HTMLInputElement\n  >;\n\n  onChangePassword: React.ChangeEventHandler<\n    HTMLTextAreaElement | HTMLInputElement\n  >;\n  onChangeConfirmPassword: React.ChangeEventHandler<\n    HTMLTextAreaElement | HTMLInputElement\n  >;\n  textFieldVariant?: TextFieldProps['variant'];\n  onSubmit: () => void;\n}\n\nexport default function RegistrationForm({\n  username,\n  password,\n  confirmPassword,\n  onChangeUsername,\n  onChangePassword,\n  onChangeConfirmPassword,\n  textFieldVariant = 'outlined',\n  onSubmit,\n}: RegistrationFormProps) {\n  const classes = useStyles();\n\n  const [forceValidate, setForceValidate] = useState(false);\n\n  const validateRequired = (value: string) =>\n    validator.isEmpty(value) ? missingRequiredFieldErrorMessage : undefined;\n\n  const validateConfirmPassword = (value: string) =>\n    value !== password ? 'Passwords do not match.' : undefined;\n\n  return (\n    <form\n      className={classes.form}\n      noValidate\n      onSubmit={(e) => {\n        e.preventDefault();\n        setForceValidate(true);\n        if (\n          [username, password].some(validateRequired) ||\n          validateConfirmPassword(confirmPassword)\n        ) {\n          return;\n        }\n        onSubmit();\n      }}\n    >\n      <ValidatedTextField\n        variant={textFieldVariant}\n        label=\"Username\"\n        forceValidate={forceValidate}\n        onValidate={validateRequired}\n        required\n        value={username}\n        inputProps={{ 'aria-label': 'username' }}\n        onChange={onChangeUsername}\n      />\n      <ValidatedTextField\n        variant={textFieldVariant}\n        label=\"Password\"\n        type=\"password\"\n        required\n        value={password}\n        inputProps={{ 'aria-label': 'password' }}\n        onChange={onChangePassword}\n        forceValidate={forceValidate}\n        onValidate={validateRequired}\n      />\n      <ValidatedTextField\n        variant={textFieldVariant}\n        label=\"Confirm password\"\n        type=\"password\"\n        required\n        value={confirmPassword}\n        inputProps={{ 'aria-label': 'confirm password' }}\n        onChange={onChangeConfirmPassword}\n        forceValidate={forceValidate}\n        onValidate={validateConfirmPassword}\n      />\n      <div className={classes.submitOrAltRow}>\n        <Button component={Link} to={routes.login} color=\"primary\">\n          Log in\n        </Button>\n        <Button type=\"submit\" variant=\"contained\" color=\"primary\">\n          Register\n        </Button>\n      </div>\n    </form>\n  );\n}\n","import { makeStyles } from '@material-ui/core';\n\nconst useStyles = makeStyles((theme) => ({\n  content: {\n    display: 'flex',\n    flexDirection: 'column',\n    gap: theme.spacing(2),\n    padding: theme.spacing(3),\n  },\n}));\n\nexport default useStyles;\n","import { Container } from '@material-ui/core';\nimport { Alert } from '@material-ui/lab';\nimport { useState } from 'react';\nimport { useHistory } from 'react-router';\nimport routes from '../../router/constants/routes';\nimport useTextFieldValue from '../../common/hooks/use-text-field-value';\nimport userService from '../../user/services/user.service';\nimport RegistrationForm from '../components/registration-form';\nimport useStyles from './registration.page.styles';\n\nexport default function RegistrationPage() {\n  const classes = useStyles();\n  const [username, onChangeUsername] = useTextFieldValue('');\n  const [password, onChangePassword] = useTextFieldValue('');\n  const [confirmPassword, onChangeConfirmPassword] = useTextFieldValue('');\n  const [serverError, setServerError] = useState('');\n  const history = useHistory();\n  return (\n    <div>\n      <Container className={classes.content}>\n        {serverError && <Alert severity=\"error\">{serverError}</Alert>}\n        <RegistrationForm\n          username={username}\n          password={password}\n          confirmPassword={confirmPassword}\n          onChangeUsername={onChangeUsername}\n          onChangePassword={onChangePassword}\n          onChangeConfirmPassword={onChangeConfirmPassword}\n          onSubmit={() => {\n            userService\n              .create({ username, password })\n              .then(() => history.push(routes.login))\n              .catch((e) => {\n                if (e.response) {\n                  setServerError(e.response?.data?.message);\n                } else {\n                  setServerError('An error has occurred.');\n                }\n              });\n          }}\n        />\n      </Container>\n    </div>\n  );\n}\n"],"sourceRoot":""}
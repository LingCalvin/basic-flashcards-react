{"version":3,"sources":["auth/components/form.styles.tsx","auth/components/login-form.tsx","auth/pages/login.page.styles.tsx","auth/pages/login.page.tsx"],"names":["useStyles","makeStyles","theme","form","display","flexDirection","gap","spacing","submitOrAltRow","justifyContent","alignItems","schema","yup","shape","username","label","required","password","LoginForm","variant","onSubmit","classes","useForm","resolver","yupResolver","errors","formState","register","handleSubmit","className","TextField","inputProps","error","undefined","helperText","message","type","Button","component","Link","to","routes","registration","color","content","padding","LoginPage","credentials","useContext","CredentialsContext","useState","serverError","setServerError","search","useLocation","redirectURL","URLSearchParams","get","dashboard","Container","Alert","severity","value","authService","logIn","catch","e","response","data"],"mappings":"yIAAA,aAEMA,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJC,QAAS,OACTC,cAAe,SACfC,IAAKJ,EAAMK,QAAQ,IAErBC,eAAgB,CACdJ,QAAS,OACTK,eAAgB,gBAChBC,WAAY,cAIDV,O,yMCFTW,EAASC,MAAaC,MAAM,CAChCC,SAAUF,MAAaG,MAAM,YAAYC,WACzCC,SAAUL,MAAaG,MAAM,YAAYC,aAO5B,SAASE,EAAT,GAA2D,IAAD,IAArCC,EAAqC,EAArCA,QAASC,EAA4B,EAA5BA,SACrCC,EAAUrB,cAEhB,EAIIsB,YAAoB,CAAEC,SAAUC,YAAYb,KAHjCc,EADf,EACEC,UAAaD,OACbE,EAFF,EAEEA,SACAC,EAHF,EAGEA,aAGF,OACE,uBAAMC,UAAWR,EAAQlB,KAAMiB,SAAUQ,EAAaR,GAAtD,UACE,cAACU,EAAA,EAAD,CACEf,MAAM,WACNI,QAASA,EACTY,WAAYJ,EAAS,WAAY,CAAEX,UAAU,IAC7CgB,WAA2BC,IAApBR,EAAOX,SACdoB,WAAU,UAAET,EAAOX,gBAAT,aAAE,EAAiBqB,UAE/B,cAACL,EAAA,EAAD,CACEf,MAAM,WACNqB,KAAK,WACLjB,QAASA,EACTY,WAAYJ,EAAS,WAAY,CAAEX,UAAU,IAC7CgB,WAA2BC,IAApBR,EAAOR,SACdiB,WAAU,UAAET,EAAOR,gBAAT,aAAE,EAAiBkB,UAE/B,sBAAKN,UAAWR,EAAQb,eAAxB,UACE,cAAC6B,EAAA,EAAD,CAAQC,UAAWC,IAAMC,GAAIC,IAAOC,aAAcC,MAAM,UAAxD,4BAGA,cAACN,EAAA,EAAD,CAAQD,KAAK,SAASjB,QAAQ,YAAYwB,MAAM,UAAhD,0B,qBCzCO3C,EATGC,aAAW,SAACC,GAAD,MAAY,CACvC0C,QAAS,CACPxC,QAAS,OACTC,cAAe,SACfC,IAAKJ,EAAMK,QAAQ,GACnBsC,QAAS3C,EAAMK,QAAQ,Q,QCIZ,SAASuC,IAAa,IAAD,EAC5BC,EAAcC,qBAAWC,KACzB5B,EAAUrB,IAEhB,EAAsCkD,mBAAS,IAA/C,mBAAOC,EAAP,KAAoBC,EAApB,KAEQC,EAAWC,cAAXD,OACFE,EAAW,UACf,IAAIC,gBAAgBH,GAAQI,IAAI,mBADjB,QACgChB,IAAOiB,UAExD,OAAIX,EACK,cAAC,IAAD,CAAUP,GAAIe,IAIrB,8BACE,eAACI,EAAA,EAAD,CAAW9B,UAAWR,EAAQuB,QAA9B,UACGO,GAAe,cAACS,EAAA,EAAD,CAAOC,SAAS,QAAhB,SAAyBV,IACzC,cAACjC,EAAD,CACEC,QAAQ,WACRC,SAAU,SAAC0C,GACTC,IAAYC,MAAMF,EAAMhD,SAAUgD,EAAM7C,UAAUgD,OAAM,SAACC,GACtC,IAAD,IAAZA,EAAEC,SACJf,EAAc,UAACc,EAAEC,gBAAH,iBAAC,EAAYC,YAAb,aAAC,EAAkBjC,SAEjCiB,EAAe","file":"static/js/15.7e352720.chunk.js","sourcesContent":["import { makeStyles } from '@material-ui/core';\n\nconst useStyles = makeStyles((theme) => ({\n  form: {\n    display: 'flex',\n    flexDirection: 'column',\n    gap: theme.spacing(2),\n  },\n  submitOrAltRow: {\n    display: 'flex',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n  },\n}));\n\nexport default useStyles;\n","import useStyles from './form.styles';\nimport { Button, TextField, TextFieldProps } from '@material-ui/core';\nimport routes from '../../router/constants/routes';\nimport { Link } from 'react-router-dom';\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport * as yup from 'yup';\n\nexport type FormValues = {\n  username: string;\n  password: string;\n};\n\nconst schema = yup.object().shape({\n  username: yup.string().label('Username').required(),\n  password: yup.string().label('Password').required(),\n});\ninterface LoginFormProps {\n  variant?: TextFieldProps['variant'];\n  onSubmit: (value: FormValues) => void;\n}\n\nexport default function LoginForm({ variant, onSubmit }: LoginFormProps) {\n  const classes = useStyles();\n\n  const {\n    formState: { errors },\n    register,\n    handleSubmit,\n  } = useForm<FormValues>({ resolver: yupResolver(schema) });\n\n  return (\n    <form className={classes.form} onSubmit={handleSubmit(onSubmit)}>\n      <TextField\n        label=\"Username\"\n        variant={variant}\n        inputProps={register('username', { required: true })}\n        error={errors.username !== undefined}\n        helperText={errors.username?.message}\n      />\n      <TextField\n        label=\"Password\"\n        type=\"password\"\n        variant={variant}\n        inputProps={register('password', { required: true })}\n        error={errors.password !== undefined}\n        helperText={errors.password?.message}\n      />\n      <div className={classes.submitOrAltRow}>\n        <Button component={Link} to={routes.registration} color=\"primary\">\n          Create account\n        </Button>\n        <Button type=\"submit\" variant=\"contained\" color=\"primary\">\n          Log in\n        </Button>\n      </div>\n    </form>\n  );\n}\n","import { makeStyles } from '@material-ui/core';\n\nconst useStyles = makeStyles((theme) => ({\n  content: {\n    display: 'flex',\n    flexDirection: 'column',\n    gap: theme.spacing(2),\n    padding: theme.spacing(3),\n  },\n}));\n\nexport default useStyles;\n","import { Container } from '@material-ui/core';\nimport { Alert } from '@material-ui/lab';\nimport { useContext, useState } from 'react';\nimport { useLocation } from 'react-router';\nimport { Redirect } from 'react-router-dom';\nimport routes from '../../router/constants/routes';\nimport LoginForm from '../components/login-form';\nimport { authService } from '../services/auth.service';\nimport useStyles from './login.page.styles';\nimport CredentialsContext from '../contexts/credentials.context';\n\nexport default function LoginPage() {\n  const credentials = useContext(CredentialsContext);\n  const classes = useStyles();\n\n  const [serverError, setServerError] = useState('');\n\n  const { search } = useLocation();\n  const redirectURL =\n    new URLSearchParams(search).get('continue') ?? routes.dashboard;\n\n  if (credentials) {\n    return <Redirect to={redirectURL} />;\n  }\n\n  return (\n    <div>\n      <Container className={classes.content}>\n        {serverError && <Alert severity=\"error\">{serverError}</Alert>}\n        <LoginForm\n          variant=\"outlined\"\n          onSubmit={(value) => {\n            authService.logIn(value.username, value.password).catch((e) => {\n              if (e.response) {\n                setServerError(e.response?.data?.message);\n              } else {\n                setServerError('An error has occurred.');\n              }\n            });\n          }}\n        />\n      </Container>\n    </div>\n  );\n}\n"],"sourceRoot":""}
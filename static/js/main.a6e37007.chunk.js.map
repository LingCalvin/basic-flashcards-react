{"version":3,"sources":["router/constants/routes.ts","auth/utils/credentials.utils.ts","common/components/app-bar.styles.tsx","common/components/app-bar.tsx","router/components/protected-route.tsx","common/pages/lazy-loading-fallback.page.tsx","router/components/router-switch.tsx","app.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx","common/services/local-storage.service.ts","auth/contexts/credentials.context.tsx","auth/services/auth.service.ts","common/constants/api-client.ts","user/services/user.service.ts","common/hooks/use-is-mobile.tsx"],"names":["routes","home","dashboard","decks","deckSearch","deckAdd","deckEdit","deckView","login","registration","retrieve","user","userService","getCurrentUser","accessToken","localStorageService","getItem","useStyles","makeStyles","theme","button","whiteSpace","homeLink","textTransform","titleContainer","flexGrow","avatarButton","padding","spacing","menuUsername","textAlign","fontWeight","typography","fontWeightBold","searchBar","breakpoints","down","width","searchBarInput","paddingLeft","paddingRight","paddingTop","paddingBottom","toolbar","gap","AppBar","searchBarOpen","searchBarValue","onSearch","onChangeSearchBarValue","onCloseSearchBar","classes","location","useLocation","isMobile","useIsMobile","useState","menuAnchor","setMenuAnchor","credentials","useContext","CredentialsContext","closeMenu","history","useHistory","showSearchBar","setShowSearchBar","searchTerm","setSearchTerm","from","URLSearchParams","search","get","previousLocation","menu","Menu","open","anchorEl","anchorOrigin","vertical","horizontal","transformOrigin","getContentAnchorEl","undefined","onClose","Typography","className","username","toLocaleUpperCase","Divider","MenuItem","onClick","authService","logOut","then","push","avatar","Avatar","substring","loginProfile","isAuthenticated","IconButton","color","e","currentTarget","Button","component","Link","to","Paper","onSubmit","preventDefault","pathname","encodeURIComponent","InputBase","value","autoFocus","fullWidth","placeholder","startAdornment","InputAdornment","position","Search","endAdornment","aria-label","Close","onChange","target","mobileToolbar","Toolbar","clsx","variant","standardToolbar","ProtectedRoute","props","path","LazyLoadingFallbackPage","delay","showProgress","setShowProgress","useEffect","timer","setTimeout","clearTimeout","LinearProgress","DashboardPage","lazy","AddDeckPage","DeckPage","LoginPage","RegistrationPage","HomePage","EditDeckPage","DeckSearchPage","RouterSwitch","fallback","exact","App","setCredentials","syncCredentials","document","addEventListener","removeEventListener","Provider","CssBaseline","Boolean","window","hostname","match","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","getElementById","navigator","serviceWorker","ready","unregister","catch","error","console","message","key","localStorage","removeItem","dispatchEvent","Event","setItem","createContext","http","password","a","this","post","data","decodedAccessToken","JSON","stringify","id","sub","token","accessTokenPayload","parse","apiClient","axios","create","baseURL","process","withCredentials","interceptors","request","use","config","headers","params","raw","useTheme","useMediaQuery","noSsr"],"mappings":"uIAYeA,IAZA,CACbC,KAAM,IACNC,UAAW,aACXC,MAAO,SACPC,WAAY,UACZC,QAAS,YACTC,SAAU,kBACVC,SAAU,aACVC,MAAO,cACPC,aAAc,mB,4HCNT,SAASC,IAEd,IAAMC,EAAOC,IAAYC,iBACnBC,EAAcC,IAAoBC,QAAQ,eAChD,OAAKL,GAASG,EAGP,2BAAKH,GAAZ,IAAkBG,gBAFT,K,iMCkCIG,EAxCGC,aAAW,SAACC,GAAD,YAAY,CACvCC,OAAQ,CACNC,WAAY,UAEdC,SAAU,CACRC,cAAe,QAEjBC,eAAgB,CACdC,SAAU,GAEZC,aAAc,CACZC,QAASR,EAAMS,QAAQ,KAEzBC,aAAc,CACZC,UAAW,SACXH,QAASR,EAAMS,QAAQ,GACvBG,WAAYZ,EAAMa,WAAWC,gBAE/BC,WAAS,mBACNf,EAAMgB,YAAYC,KAAK,MAAQ,CAC9BC,MAAO,SAFF,yBAIG,SAJH,sBAKA,QALA,GAOTC,eAAe,aACbC,YAAapB,EAAMS,QAAQ,GAC3BY,aAAcrB,EAAMS,QAAQ,GAC5Ba,WAAYtB,EAAMS,QAAQ,IAC1Bc,cAAevB,EAAMS,QAAQ,IAC7BS,MAAO,QACNlB,EAAMgB,YAAYC,KAAK,MAAQ,CAC9BI,aAAc,IAGlBG,QAAS,CACPC,IAAKzB,EAAMS,QAAQ,Q,OCNR,SAASiB,EAAT,GAMC,EALdC,cAKe,IAJfC,EAIc,EAJdA,eAGAC,GACc,EAHdC,uBAGc,EAFdC,iBAEc,EADdF,UAEMG,EAAUlC,IAEVmC,EAAWC,cAEXC,EAAWC,cAEjB,EAAoCC,mBAA6B,MAAjE,mBAAOC,EAAP,KAAmBC,EAAnB,KAEMC,EAAcC,qBAAWC,KAEzBC,EAAY,kBAAMJ,EAAc,OAChCK,EAAUC,cAEhB,EAA0CR,oBAAS,GAAnD,mBAAOS,EAAP,KAAsBC,EAAtB,KACA,EAAoCV,mBAAS,IAA7C,mBAAOW,EAAP,KAAmBC,EAAnB,KAGMC,EADK,IAAIC,gBAAgBlB,EAASmB,QACxBC,IAAI,QACdC,EAAgB,OAAGJ,QAAH,IAAGA,IAAQrE,IAAOC,KAElCyE,EACJ,eAACC,EAAA,EAAD,CACEC,KAAqB,OAAfnB,EACNoB,SAAUpB,EACVqB,aAAc,CAAEC,SAAU,SAAUC,WAAY,SAChDC,gBAAiB,CAAEF,SAAU,MAAOC,WAAY,SAChDE,wBAAoBC,EACpBC,QAAStB,EANX,UAQE,cAACuB,EAAA,EAAD,CAAYC,UAAWnC,EAAQtB,aAA/B,gBACG8B,QADH,IACGA,OADH,EACGA,EAAa4B,SAASC,sBAEzB,cAACC,EAAA,EAAD,IACA,cAACC,EAAA,EAAD,CAAUC,QAAS7B,EAAnB,4BACA,cAAC4B,EAAA,EAAD,CACEC,QAAS,WACPjC,EAAc,MACdkC,IAAYC,SAASC,MAAK,kBAAM/B,EAAQgC,KAAK/F,IAAOC,UAHxD,yBAWE+F,EACJ,cAACC,EAAA,EAAD,iBAAStC,QAAT,IAASA,OAAT,EAASA,EAAa4B,SAASW,UAAU,EAAG,GAAGV,sBAG3CW,EAAeP,IAAYQ,kBAC/B,cAACC,EAAA,EAAD,CACEf,UAAWnC,EAAQzB,aACnB4E,MAAM,UACNX,QAAS,SAACY,GAAD,OAAO7C,EAAc6C,EAAEC,gBAHlC,SAKGR,IAGH,cAACS,EAAA,EAAD,CACEnB,UAAWnC,EAAQ/B,OACnBsF,UAAWC,IACXC,GAAI5G,IAAOQ,MACX8F,MAAM,UAJR,oBAUIpE,EACJ,cAAC2E,EAAA,EAAD,CAAOvB,UAAWnC,EAAQjB,UAA1B,SACE,sBACE4E,SAAU,SAACP,GACTA,EAAEQ,iBACF/D,EACIA,IACAe,EAAQgC,KAAK,CACXiB,SAAUhH,IAAOI,WACjBmE,OAAO,SAAD,OAAW0C,mBACf7D,EAAS4D,UADL,iBAEIC,mBAAkB,OAAClE,QAAD,IAACA,IAAkBoB,OATzD,SAaE,cAAC+C,EAAA,EAAD,CACEC,MAAK,OAAEpE,QAAF,IAAEA,IAAkBoB,EACzBiD,UAAW9D,EACX+D,UAAW/D,EACXgE,YAAY,SACZhC,UAAWnC,EAAQb,eACnBiF,eACE,cAACC,EAAA,EAAD,CAAgBC,SAAS,QAAzB,SACE,cAACC,EAAA,EAAD,MAGJC,aACErE,EACE,cAACkE,EAAA,EAAD,CAAgBC,SAAS,MAAzB,SACE,cAACpB,EAAA,EAAD,CACEuB,aAAW,eACXjC,QACEvC,EAAS4D,WAAahH,IAAOI,WACzB,WACE8D,GAAiB,GACjBE,EAAc,IACdL,EAAQgC,KAAKtB,IAEf,WACEP,GAAiB,GACjBE,EAAc,KAXxB,SAeE,cAACyD,EAAA,EAAD,aAGF1C,EAEN2C,SAAU,SAACvB,GAAD,OAAOnC,EAAcmC,EAAEwB,OAAOZ,cAM1Ca,EACJ,cAACC,EAAA,EAAD,CAAS3C,UAAWnC,EAAQR,QAA5B,SACGS,EAAS4D,WAAahH,IAAOI,YAAc6D,EAC1C/B,EAEA,qCACE,qBAAKoD,UAAWnC,EAAQ3B,eAAxB,SACE,cAACiF,EAAA,EAAD,CACEH,MAAM,UACNI,UAAWC,IACXC,GAAI5G,IAAOC,KACXqF,UAAW4C,YAAK/E,EAAQ/B,OAAQ+B,EAAQ7B,UAJ1C,SAME,cAAC+D,EAAA,EAAD,CAAY8C,QAAQ,KAAKzB,UAAU,OAAnC,kCAKJ,cAACL,EAAA,EAAD,CACEuB,aAAW,gBACXtB,MAAM,UACNX,QAAS,kBAAMzB,GAAiB,IAHlC,SAKE,cAACwD,EAAA,EAAD,MAEDvB,OAMHiC,EACJ,eAACH,EAAA,EAAD,CAAS3C,UAAWnC,EAAQR,QAA5B,UACE,qBAAK2C,UAAWnC,EAAQ3B,eAAxB,SACE,cAACiF,EAAA,EAAD,CACEH,MAAM,UACNI,UAAWC,IACXC,GAAI5G,IAAOC,KACXqF,UAAW4C,YAAK/E,EAAQ/B,OAAQ+B,EAAQ7B,UAJ1C,SAME,cAAC+D,EAAA,EAAD,CAAY8C,QAAQ,KAApB,kCAGHjG,EACAiE,KAIL,OACE,eAAC,IAAD,CAAWsB,SAAS,SAApB,UACG/C,EACApB,EAAW0E,EAAgBI,KC5MnB,SAASC,EAAeC,GACrC,OAAO1C,IAAYQ,kBACjB,cAAC,IAAD,eAAWkC,IAEX,cAAC,IAAD,CACE1B,GAAI,CACFI,SAAUhH,IAAOQ,MACjB+D,OAAO,aAAD,OAAe0C,mBAAmBqB,EAAMC,U,aCTvC,SAASC,EAAT,GAEmB,IAAD,IAD/BC,aAC+B,MADvB,IACuB,EAC/B,EAAwCjF,mBAASiF,GAAS,GAA1D,mBAAOC,EAAP,KAAqBC,EAArB,KAWA,OAVAC,qBAAU,WACR,IAAMC,EAAQC,YAAW,WACvBH,GAAgB,KACfF,GAEH,OAAO,WACLM,aAAaF,MAEd,CAACJ,IAEGC,EAAe,cAACM,EAAA,EAAD,CAAgB1C,MAAM,cAAiB,6BCd/D,IAAM2C,EAAgBC,gBACpB,kBAAM,uEAEFC,EAAcD,gBAAK,kBAAM,8DACzBE,EAAWF,gBAAK,kBAAM,wDACtBG,EAAYH,gBAAK,kBAAM,+DACvBI,EAAmBJ,gBACvB,kBAAM,+DAEFK,EAAWL,gBAAK,kBAAM,iCACtBM,EAAeN,gBAAK,kBAAM,8DAC1BO,EAAiBP,gBAAK,kBAAM,yDAEnB,SAASQ,IACtB,IAAM/F,EAAcC,qBAAWC,KAC/B,OACE,cAAC,WAAD,CAAU8F,SAAU,cAACnB,EAAD,IAApB,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOoB,OAAK,EAACrB,KAAMvI,IAAOC,KAA1B,SACG0D,EAAc,cAAC,IAAD,CAAUiD,GAAI5G,IAAOE,YAAgB,cAACqJ,EAAD,MAEtD,cAAClB,EAAD,CAAgBE,KAAMvI,IAAOE,UAA7B,SACE,cAAC+I,EAAD,MAEF,cAAC,IAAD,CAAOW,OAAK,EAACrB,KAAMvI,IAAOO,SAA1B,SACE,cAAC6I,EAAD,MAEF,cAACf,EAAD,CAAgBE,KAAMvI,IAAOK,QAA7B,SACE,cAAC8I,EAAD,MAEF,cAACd,EAAD,CAAgBE,KAAMvI,IAAOM,SAA7B,SACE,cAACkJ,EAAD,MAEF,cAAC,IAAD,CAAOjB,KAAMvI,IAAOI,WAApB,SACE,cAACqJ,EAAD,MAEF,cAAC,IAAD,CAAOlB,KAAMvI,IAAOS,aAApB,SACE,cAAC6I,EAAD,MAEF,cAAC,IAAD,CAAOf,KAAMvI,IAAOQ,MAApB,SACE,cAAC6I,EAAD,WCvCK,SAASQ,IACtB,MAAsCrG,mBAA6B9C,GAAnE,mBAAOiD,EAAP,KAAoBmG,EAApB,KAcA,OAZAlB,qBAAU,WACR,IAAMmB,EAAkB,WACtBD,EAAepJ,IAGjB,OADAsJ,SAASC,iBAAiB,4BAA6BF,GAChD,kBACLC,SAASE,oBACP,4BACAH,MAEH,IAGD,mCACE,eAAC,IAAmBI,SAApB,CAA6BhD,MAAOxD,EAApC,UACE,cAACyG,EAAA,EAAD,IACA,cAAC,EAAD,IACA,cAACV,EAAD,SChBYW,QACW,cAA7BC,OAAOlH,SAASmH,UAEe,UAA7BD,OAAOlH,SAASmH,UAEhBD,OAAOlH,SAASmH,SAASC,MACvB,2DChBN,IAYeC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,+BAAqB7E,MAAK,YAAkD,IAA/C8E,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,4BCGdO,IAASC,OACP,cAAC,aAAD,UACE,cAAC,IAAD,UACE,cAACrB,EAAD,QAGJG,SAASmB,eAAe,SFsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxF,MAAK,SAACrF,GACLA,EAAa8K,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,YEjH5BlB,K,oDCbM1J,EAAsB,IAhB5B,uFACE,SAAQ6K,GACN,OAAOC,aAAa7K,QAAQ4K,KAFhC,wBAKE,SAAWA,GACTC,aAAaC,WAAWF,GACxB5B,SAAS+B,cAAc,IAAIC,MAAM,gCAPrC,qBAUE,SAAQJ,EAAazE,GACnB0E,aAAaI,QAAQL,EAAKzE,GAC1B6C,SAAS+B,cAAc,IAAIC,MAAM,kCAZrC,MAiBejL,O,gCCjBf,WAGM8C,EAAqBqI,wBAAkC,MAC9CrI,O,+HCsDF+B,EAAc,IArD3B,WACE,WAAoBuG,GAAsB,yBAAtBA,OADtB,gFAGE,WAAY5G,EAAkB6G,GAA9B,qBAAAC,EAAA,sEAGYC,KAAKH,KAAKI,KAAoB,sBAAuB,CAC7DhH,WACA6G,aALJ,2BAEII,KAAQ1L,EAFZ,EAEYA,YAAa2L,EAFzB,EAEyBA,mBAKvB1L,IAAoBkL,QAAQ,cAAenL,GAC3CC,IAAoBkL,QAClB,qBACAS,KAAKC,UAAUF,IAEjB1L,IAAoBkL,QAClB,OACAS,KAAKC,UAAU,CAAEC,GAAIH,EAAmBI,IAAKtH,cAdjD,kBAgBSkH,GAhBT,iDAHF,oHAsBE,sBAAAJ,EAAA,sDACEtL,IAAoB+K,WAAW,eAC/B/K,IAAoB+K,WAAW,sBAC/B/K,IAAoB+K,WAAW,QAHjC,2CAtBF,4HA6BE,WAAwBgB,GAAxB,SAAAT,EAAA,+EAEUC,KAAKH,KAAK3H,IAAV,8BAAqCsI,IAF/C,iCAGW,GAHX,0DAKW,GALX,wDA7BF,oFAsCE,WACE,OAAsD,OAA/C/L,IAAoBC,QAAQ,iBAvCvC,4BA0CE,WACE,IAAM+L,EAAqBhM,IAAoBC,QAC7C,sBAEF,OAAK+L,EAGEL,KAAKM,MAAMD,GAAoBF,IAF7B,SA/Cb,KAqD2B,CAAgBI,M,gCC1D3C,6BAGMA,EAAYC,IAAMC,OAAO,CAC7BC,QAASC,yCACTC,iBAAiB,IAInBL,EAAUM,aAAaC,QAAQC,KAAI,SAACC,GAClC,IAAM5M,EAAcC,IAAoBC,QAAQ,eAIhD,OAHIF,IACF4M,EAAOC,QAAP,+BAA4C7M,IAEvC4M,KAGMT,O,oECITrM,EAAc,IAfpB,WACE,WAAoBuL,GAAsB,yBAAtBA,OADtB,0CAEE,SAAOyB,GACL,OAAOtB,KAAKH,KAAKI,KAAK,SAAUqB,KAHpC,4BAME,WACE,IAAMC,EAAM9M,IAAoBC,QAAQ,QACxC,OAAK6M,EAGEnB,KAAKM,MAAMa,GAFT,SATb,KAeoB,CAAgBZ,KACrBrM,O,gCCtBf,uDAEe,SAAS2C,IACtB,IAAMpC,EAAQ2M,cAEd,OADcC,YAAc5M,EAAMgB,YAAYC,KAAK,MAAO,CAAE4L,OAAO,M","file":"static/js/main.a6e37007.chunk.js","sourcesContent":["const routes = {\n  home: '/',\n  dashboard: '/dashboard',\n  decks: '/decks',\n  deckSearch: '/search',\n  deckAdd: '/add-deck',\n  deckEdit: '/decks/:id/edit',\n  deckView: '/decks/:id',\n  login: '/auth/login',\n  registration: '/auth/register',\n};\n\nexport default routes;\n","import localStorageService from '../../common/services/local-storage.service';\nimport userService from '../../user/services/user.service';\n\nexport function retrieve() {\n  // TODO: check access token expiration\n  const user = userService.getCurrentUser();\n  const accessToken = localStorageService.getItem('accessToken');\n  if (!user || !accessToken) {\n    return null;\n  }\n  return { ...user, accessToken };\n}\n","import { makeStyles } from '@material-ui/core';\n\nconst useStyles = makeStyles((theme) => ({\n  button: {\n    whiteSpace: 'nowrap',\n  },\n  homeLink: {\n    textTransform: 'none',\n  },\n  titleContainer: {\n    flexGrow: 1,\n  },\n  avatarButton: {\n    padding: theme.spacing(0.5),\n  },\n  menuUsername: {\n    textAlign: 'center',\n    padding: theme.spacing(1),\n    fontWeight: theme.typography.fontWeightBold,\n  },\n  searchBar: {\n    [theme.breakpoints.down('xs')]: {\n      width: '100%',\n    },\n    maxWidth: '600px',\n    width: '100%',\n  },\n  searchBarInput: {\n    paddingLeft: theme.spacing(1),\n    paddingRight: theme.spacing(1),\n    paddingTop: theme.spacing(0.5),\n    paddingBottom: theme.spacing(0.5),\n    width: '100%',\n    [theme.breakpoints.down('xs')]: {\n      paddingRight: 0,\n    },\n  },\n  toolbar: {\n    gap: theme.spacing(1),\n  },\n}));\n\nexport default useStyles;\n","import {\n  AppBar as MuiAppBar,\n  Avatar,\n  Button,\n  Divider,\n  IconButton,\n  InputAdornment,\n  InputBase,\n  Menu,\n  MenuItem,\n  Paper,\n  Toolbar,\n  Typography,\n} from '@material-ui/core';\nimport { Close, Search } from '@material-ui/icons';\nimport clsx from 'clsx';\nimport { useContext, useState } from 'react';\nimport { Link, useHistory, useLocation } from 'react-router-dom';\nimport CredentialsContext from '../../auth/contexts/credentials.context';\nimport { authService } from '../../auth/services/auth.service';\nimport useIsMobile from '../hooks/use-is-mobile';\nimport routes from '../../router/constants/routes';\nimport useStyles from './app-bar.styles';\n\nexport interface AppBarProps {\n  searchBarOpen?: boolean;\n  searchBarValue?: string;\n  onChangeSearchBarValue?: (value: string) => void;\n  onCloseSearchBar?: () => void;\n  onSearch?: () => void;\n}\n\nexport default function AppBar({\n  searchBarOpen,\n  searchBarValue,\n  onChangeSearchBarValue,\n  onCloseSearchBar,\n  onSearch,\n}: AppBarProps) {\n  const classes = useStyles();\n\n  const location = useLocation();\n\n  const isMobile = useIsMobile();\n\n  const [menuAnchor, setMenuAnchor] = useState<null | HTMLElement>(null);\n\n  const credentials = useContext(CredentialsContext);\n\n  const closeMenu = () => setMenuAnchor(null);\n  const history = useHistory();\n\n  const [showSearchBar, setShowSearchBar] = useState(false);\n  const [searchTerm, setSearchTerm] = useState('');\n\n  const qs = new URLSearchParams(location.search);\n  const from = qs.get('from');\n  const previousLocation = from ?? routes.home;\n\n  const menu = (\n    <Menu\n      open={menuAnchor !== null}\n      anchorEl={menuAnchor}\n      anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\n      transformOrigin={{ vertical: 'top', horizontal: 'right' }}\n      getContentAnchorEl={undefined}\n      onClose={closeMenu}\n    >\n      <Typography className={classes.menuUsername}>\n        {credentials?.username.toLocaleUpperCase()}\n      </Typography>\n      <Divider />\n      <MenuItem onClick={closeMenu}>Manage account</MenuItem>\n      <MenuItem\n        onClick={() => {\n          setMenuAnchor(null);\n          authService.logOut().then(() => history.push(routes.home));\n        }}\n      >\n        Sign out\n      </MenuItem>\n    </Menu>\n  );\n\n  const avatar = (\n    <Avatar>{credentials?.username.substring(0, 1).toLocaleUpperCase()}</Avatar>\n  );\n\n  const loginProfile = authService.isAuthenticated() ? (\n    <IconButton\n      className={classes.avatarButton}\n      color=\"inherit\"\n      onClick={(e) => setMenuAnchor(e.currentTarget)}\n    >\n      {avatar}\n    </IconButton>\n  ) : (\n    <Button\n      className={classes.button}\n      component={Link}\n      to={routes.login}\n      color=\"inherit\"\n    >\n      Log in\n    </Button>\n  );\n\n  const searchBar = (\n    <Paper className={classes.searchBar}>\n      <form\n        onSubmit={(e) => {\n          e.preventDefault();\n          onSearch\n            ? onSearch()\n            : history.push({\n                pathname: routes.deckSearch,\n                search: `?from=${encodeURIComponent(\n                  location.pathname\n                )}&term=${encodeURIComponent(searchBarValue ?? searchTerm)}`,\n              });\n        }}\n      >\n        <InputBase\n          value={searchBarValue ?? searchTerm}\n          autoFocus={isMobile}\n          fullWidth={isMobile}\n          placeholder=\"Search\"\n          className={classes.searchBarInput}\n          startAdornment={\n            <InputAdornment position=\"start\">\n              <Search />\n            </InputAdornment>\n          }\n          endAdornment={\n            isMobile ? (\n              <InputAdornment position=\"end\">\n                <IconButton\n                  aria-label=\"close search\"\n                  onClick={\n                    location.pathname === routes.deckSearch\n                      ? () => {\n                          setShowSearchBar(false);\n                          setSearchTerm('');\n                          history.push(previousLocation);\n                        }\n                      : () => {\n                          setShowSearchBar(false);\n                          setSearchTerm('');\n                        }\n                  }\n                >\n                  <Close />\n                </IconButton>\n              </InputAdornment>\n            ) : undefined\n          }\n          onChange={(e) => setSearchTerm(e.target.value)}\n        />\n      </form>\n    </Paper>\n  );\n\n  const mobileToolbar = (\n    <Toolbar className={classes.toolbar}>\n      {location.pathname === routes.deckSearch || showSearchBar ? (\n        searchBar\n      ) : (\n        <>\n          <div className={classes.titleContainer}>\n            <Button\n              color=\"inherit\"\n              component={Link}\n              to={routes.home}\n              className={clsx(classes.button, classes.homeLink)}\n            >\n              <Typography variant=\"h6\" component=\"span\">\n                Basic Flashcards\n              </Typography>\n            </Button>\n          </div>\n          <IconButton\n            aria-label=\"toggle search\"\n            color=\"inherit\"\n            onClick={() => setShowSearchBar(true)}\n          >\n            <Search />\n          </IconButton>\n          {loginProfile}\n        </>\n      )}\n    </Toolbar>\n  );\n\n  const standardToolbar = (\n    <Toolbar className={classes.toolbar}>\n      <div className={classes.titleContainer}>\n        <Button\n          color=\"inherit\"\n          component={Link}\n          to={routes.home}\n          className={clsx(classes.button, classes.homeLink)}\n        >\n          <Typography variant=\"h6\">Basic Flashcards</Typography>\n        </Button>\n      </div>\n      {searchBar}\n      {loginProfile}\n    </Toolbar>\n  );\n\n  return (\n    <MuiAppBar position=\"sticky\">\n      {menu}\n      {isMobile ? mobileToolbar : standardToolbar}\n    </MuiAppBar>\n  );\n}\n","import { Redirect, RouteProps } from 'react-router';\nimport { Route } from 'react-router-dom';\nimport { authService } from '../../auth/services/auth.service';\nimport routes from '../constants/routes';\n\ninterface ProtectedRouteProps extends RouteProps {\n  path: string;\n}\n\nexport default function ProtectedRoute(props: ProtectedRouteProps) {\n  return authService.isAuthenticated() ? (\n    <Route {...props} />\n  ) : (\n    <Redirect\n      to={{\n        pathname: routes.login,\n        search: `?continue=${encodeURIComponent(props.path)}`,\n      }}\n    />\n  );\n}\n","import { LinearProgress } from '@material-ui/core';\nimport { useEffect, useState } from 'react';\n\ninterface LazyLoadingFallbackPageProps {\n  delay?: number;\n}\n\nexport default function LazyLoadingFallbackPage({\n  delay = 300,\n}: LazyLoadingFallbackPageProps) {\n  const [showProgress, setShowProgress] = useState(delay <= 0);\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setShowProgress(true);\n    }, delay);\n\n    return () => {\n      clearTimeout(timer);\n    };\n  }, [delay]);\n\n  return showProgress ? <LinearProgress color=\"secondary\" /> : <></>;\n}\n","import { Redirect, Route, Switch } from 'react-router-dom';\nimport routes from '../constants/routes';\nimport ProtectedRoute from './protected-route';\nimport { lazy, Suspense, useContext } from 'react';\nimport CredentialsContext from '../../auth/contexts/credentials.context';\nimport LazyLoadingFallbackPage from '../../common/pages/lazy-loading-fallback.page';\n\nconst DashboardPage = lazy(\n  () => import('../../dashboard/pages/dashboard.page')\n);\nconst AddDeckPage = lazy(() => import('../../deck/pages/add-deck.page'));\nconst DeckPage = lazy(() => import('../../deck/pages/deck.page'));\nconst LoginPage = lazy(() => import('../../auth/pages/login.page'));\nconst RegistrationPage = lazy(\n  () => import('../../auth/pages/registration.page')\n);\nconst HomePage = lazy(() => import('../../dashboard/pages/home.page'));\nconst EditDeckPage = lazy(() => import('../../deck/pages/edit-deck.page'));\nconst DeckSearchPage = lazy(() => import('../../deck/pages/deck-search.page'));\n\nexport default function RouterSwitch() {\n  const credentials = useContext(CredentialsContext);\n  return (\n    <Suspense fallback={<LazyLoadingFallbackPage />}>\n      <Switch>\n        <Route exact path={routes.home}>\n          {credentials ? <Redirect to={routes.dashboard} /> : <HomePage />}\n        </Route>\n        <ProtectedRoute path={routes.dashboard}>\n          <DashboardPage />\n        </ProtectedRoute>\n        <Route exact path={routes.deckView}>\n          <DeckPage />\n        </Route>\n        <ProtectedRoute path={routes.deckAdd}>\n          <AddDeckPage />\n        </ProtectedRoute>\n        <ProtectedRoute path={routes.deckEdit}>\n          <EditDeckPage />\n        </ProtectedRoute>\n        <Route path={routes.deckSearch}>\n          <DeckSearchPage />\n        </Route>\n        <Route path={routes.registration}>\n          <RegistrationPage />\n        </Route>\n        <Route path={routes.login}>\n          <LoginPage />\n        </Route>\n      </Switch>\n    </Suspense>\n  );\n}\n","import { CssBaseline } from '@material-ui/core';\nimport { useEffect, useState } from 'react';\nimport CredentialsContext from './auth/contexts/credentials.context';\nimport Credentials from './auth/interfaces/credentials';\nimport { retrieve } from './auth/utils/credentials.utils';\nimport AppBar from './common/components/app-bar';\nimport RouterSwitch from './router/components/router-switch';\n\nexport default function App() {\n  const [credentials, setCredentials] = useState<Credentials | null>(retrieve);\n\n  useEffect(() => {\n    const syncCredentials = () => {\n      setCredentials(retrieve);\n    };\n    document.addEventListener('localStorageServiceChange', syncCredentials);\n    return () =>\n      document.removeEventListener(\n        'localStorageServiceChange',\n        syncCredentials\n      );\n  }, []);\n\n  return (\n    <>\n      <CredentialsContext.Provider value={credentials}>\n        <CssBaseline />\n        <AppBar />\n        <RouterSwitch />\n      </CredentialsContext.Provider>\n    </>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { StrictMode } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\nimport { HashRouter } from 'react-router-dom';\nimport '@fontsource/roboto/300.css';\nimport '@fontsource/roboto/400.css';\nimport '@fontsource/roboto/500.css';\nimport '@fontsource/roboto/700.css';\n\nReactDOM.render(\n  <StrictMode>\n    <HashRouter>\n      <App />\n    </HashRouter>\n  </StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","export class LocalStorageService {\n  getItem(key: string): string | null {\n    return localStorage.getItem(key);\n  }\n\n  removeItem(key: string): void {\n    localStorage.removeItem(key);\n    document.dispatchEvent(new Event('localStorageServiceChange'));\n  }\n\n  setItem(key: string, value: string) {\n    localStorage.setItem(key, value);\n    document.dispatchEvent(new Event('localStorageServiceChange'));\n  }\n}\n\nconst localStorageService = new LocalStorageService();\nexport default localStorageService;\n","import { createContext } from 'react';\nimport Credentials from '../interfaces/credentials';\n\nconst CredentialsContext = createContext<Credentials | null>(null);\nexport default CredentialsContext;\n","import { AxiosInstance } from 'axios';\nimport apiClient from '../../common/constants/api-client';\nimport localStorageService from '../../common/services/local-storage.service';\nimport { LogInResponse } from '../interfaces/log-in-response';\n\nexport class AuthService {\n  constructor(private http: AxiosInstance) {}\n\n  async logIn(username: string, password: string) {\n    const {\n      data: { accessToken, decodedAccessToken },\n    } = await this.http.post<LogInResponse>('/auth/access-tokens', {\n      username,\n      password,\n    });\n    localStorageService.setItem('accessToken', accessToken);\n    localStorageService.setItem(\n      'accessTokenPayload',\n      JSON.stringify(decodedAccessToken)\n    );\n    localStorageService.setItem(\n      'user',\n      JSON.stringify({ id: decodedAccessToken.sub, username })\n    );\n    return decodedAccessToken;\n  }\n\n  async logOut() {\n    localStorageService.removeItem('accessToken');\n    localStorageService.removeItem('accessTokenPayload');\n    localStorageService.removeItem('user');\n    // TODO: Revoke token from server\n  }\n\n  async verifyAccessToken(token: string): Promise<boolean> {\n    try {\n      await this.http.get(`/auth/access-tokens/${token}`);\n      return true;\n    } catch {\n      return false;\n    }\n  }\n\n  isAuthenticated(): boolean {\n    return localStorageService.getItem('accessToken') !== null;\n  }\n\n  getCurrentUser(): string | null {\n    const accessTokenPayload = localStorageService.getItem(\n      'accessTokenPayload'\n    );\n    if (!accessTokenPayload) {\n      return null;\n    }\n    return JSON.parse(accessTokenPayload).sub;\n  }\n}\n\nexport const authService = new AuthService(apiClient);\n","import axios from 'axios';\nimport localStorageService from '../services/local-storage.service';\n\nconst apiClient = axios.create({\n  baseURL: process.env.REACT_APP_API_URL,\n  withCredentials: true,\n});\n\n// Send the access token with requests if present\napiClient.interceptors.request.use((config) => {\n  const accessToken = localStorageService.getItem('accessToken');\n  if (accessToken) {\n    config.headers['Authorization'] = `Bearer ${accessToken}`;\n  }\n  return config;\n});\n\nexport default apiClient;\n","import { AxiosInstance } from 'axios';\nimport apiClient from '../../common/constants/api-client';\nimport localStorageService from '../../common/services/local-storage.service';\nimport CreateParams from '../interfaces/create-params';\nimport User from '../interfaces/user';\n\nexport class UserService {\n  constructor(private http: AxiosInstance) {}\n  create(params: CreateParams) {\n    return this.http.post('/users', params);\n  }\n\n  getCurrentUser(): User | null {\n    const raw = localStorageService.getItem('user');\n    if (!raw) {\n      return null;\n    }\n    return JSON.parse(raw);\n  }\n}\n\nconst userService = new UserService(apiClient);\nexport default userService;\n","import { useMediaQuery, useTheme } from '@material-ui/core';\n\nexport default function useIsMobile() {\n  const theme = useTheme();\n  const match = useMediaQuery(theme.breakpoints.down('xs'), { noSsr: true });\n  return match;\n}\n"],"sourceRoot":""}
{"version":3,"sources":["common/constants/missing-required-field-error-message.tsx","common/hooks/use-text-field-value.tsx","common/components/validated-text-field.tsx","auth/components/form.styles.tsx","auth/components/login-form.tsx","auth/pages/login.page.styles.tsx","auth/pages/login.page.tsx"],"names":["missingRequiredFieldErrorMessage","useTextFieldValue","value","useState","val","setVal","e","target","ValidatedTextField","forceValidate","onValidate","onChange","onBlur","rest","checkValid","setCheckValid","errorMessage","error","undefined","helperText","useStyles","makeStyles","theme","form","display","flexDirection","gap","spacing","submitOrAltRow","justifyContent","alignItems","LoginForm","variant","username","password","onChangeUsername","onChangePassword","onSubmit","classes","setForceValidate","validateRequired","validator","isEmpty","className","noValidate","preventDefault","some","label","inputProps","required","type","Button","component","Link","to","routes","registration","color","content","padding","LoginPage","credentials","useContext","CredentialsContext","serverError","setServerError","search","useLocation","redirectURL","URLSearchParams","get","dashboard","Container","Alert","severity","authService","logIn","catch","response","data","message"],"mappings":"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","file":"static/js/13.4be6f48c.chunk.js","sourcesContent":["const missingRequiredFieldErrorMessage = 'This field is required.';\n\nexport default missingRequiredFieldErrorMessage;\n","import { useState } from 'react';\n\nexport default function useTextFieldValue(\n  value: string\n): [string, React.ChangeEventHandler<HTMLTextAreaElement | HTMLInputElement>] {\n  const [val, setVal] = useState(value);\n  return [\n    val,\n    (e: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) =>\n      setVal(e.target.value),\n  ];\n}\n","import { TextField, TextFieldProps } from '@material-ui/core';\nimport { useState } from 'react';\n\ntype ValidatedTextFieldProps = TextFieldProps & {\n  onValidate: (value: string) => string | undefined;\n  forceValidate?: boolean;\n  value: string;\n};\n\nexport default function ValidatedTextField({\n  forceValidate,\n  onValidate,\n  onChange,\n  onBlur,\n  ...rest\n}: ValidatedTextFieldProps) {\n  const [checkValid, setCheckValid] = useState(false);\n  const errorMessage = onValidate(rest.value);\n  return (\n    <TextField\n      error={(forceValidate || checkValid) && errorMessage !== undefined}\n      helperText={(forceValidate || checkValid) && errorMessage}\n      onChange={(e) => {\n        setCheckValid(true);\n        onChange?.(e);\n      }}\n      onBlur={(e) => {\n        setCheckValid(true);\n        onBlur?.(e);\n      }}\n      {...rest}\n    />\n  );\n}\n","import { makeStyles } from '@material-ui/core';\n\nconst useStyles = makeStyles((theme) => ({\n  form: {\n    display: 'flex',\n    flexDirection: 'column',\n    gap: theme.spacing(2),\n  },\n  submitOrAltRow: {\n    display: 'flex',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n  },\n}));\n\nexport default useStyles;\n","import { useState } from 'react';\nimport ValidatedTextField from '../../common/components/validated-text-field';\nimport validator from 'validator';\nimport missingRequiredFieldErrorMessage from '../../common/constants/missing-required-field-error-message';\nimport useStyles from './form.styles';\nimport { Button, TextFieldProps } from '@material-ui/core';\nimport routes from '../../router/constants/routes';\nimport { Link } from 'react-router-dom';\n\ninterface LoginFormProps {\n  variant?: TextFieldProps['variant'];\n  username: string;\n  password: string;\n  onChangeUsername: React.ChangeEventHandler<\n    HTMLTextAreaElement | HTMLInputElement\n  >;\n  onChangePassword: React.ChangeEventHandler<\n    HTMLTextAreaElement | HTMLInputElement\n  >;\n  onSubmit: () => void;\n}\n\nexport default function LoginForm({\n  variant = 'outlined',\n  username,\n  password,\n  onChangeUsername,\n  onChangePassword,\n  onSubmit,\n}: LoginFormProps) {\n  const classes = useStyles();\n\n  const [forceValidate, setForceValidate] = useState(false);\n\n  const validateRequired = (value: string) =>\n    validator.isEmpty(value) ? missingRequiredFieldErrorMessage : undefined;\n\n  return (\n    <form\n      className={classes.form}\n      noValidate\n      onSubmit={(e) => {\n        e.preventDefault();\n        setForceValidate(true);\n        if ([username, password].some(validateRequired)) {\n          return;\n        }\n\n        onSubmit();\n      }}\n    >\n      <ValidatedTextField\n        label=\"Username\"\n        value={username}\n        onChange={onChangeUsername}\n        onValidate={validateRequired}\n        forceValidate={forceValidate}\n        variant={variant}\n        inputProps={{ 'aria-label': 'username' }}\n        required\n      />\n      <ValidatedTextField\n        label=\"Password\"\n        value={password}\n        onChange={onChangePassword}\n        onValidate={validateRequired}\n        forceValidate={forceValidate}\n        variant={variant}\n        type=\"password\"\n        inputProps={{ 'aria-label': 'password' }}\n        required\n      />\n      <div className={classes.submitOrAltRow}>\n        <Button component={Link} to={routes.registration} color=\"primary\">\n          Create account\n        </Button>\n        <Button type=\"submit\" variant=\"contained\" color=\"primary\">\n          Log in\n        </Button>\n      </div>\n    </form>\n  );\n}\n","import { makeStyles } from '@material-ui/core';\n\nconst useStyles = makeStyles((theme) => ({\n  content: {\n    display: 'flex',\n    flexDirection: 'column',\n    gap: theme.spacing(2),\n    padding: theme.spacing(3),\n  },\n}));\n\nexport default useStyles;\n","import { Container } from '@material-ui/core';\nimport { Alert } from '@material-ui/lab';\nimport { useContext, useState } from 'react';\nimport { useLocation } from 'react-router';\nimport { Redirect } from 'react-router-dom';\nimport routes from '../../router/constants/routes';\nimport useTextFieldValue from '../../common/hooks/use-text-field-value';\nimport LoginForm from '../components/login-form';\nimport { authService } from '../services/auth.service';\nimport useStyles from './login.page.styles';\nimport CredentialsContext from '../contexts/credentials.context';\n\nexport default function LoginPage() {\n  const credentials = useContext(CredentialsContext);\n  const classes = useStyles();\n  const [username, onChangeUsername] = useTextFieldValue('');\n  const [password, onChangePassword] = useTextFieldValue('');\n\n  const [serverError, setServerError] = useState('');\n\n  const { search } = useLocation();\n  const redirectURL =\n    new URLSearchParams(search).get('continue') ?? routes.dashboard;\n\n  if (credentials) {\n    return <Redirect to={redirectURL} />;\n  }\n\n  return (\n    <div>\n      <Container className={classes.content}>\n        {serverError && <Alert severity=\"error\">{serverError}</Alert>}\n        <LoginForm\n          variant=\"outlined\"\n          username={username}\n          password={password}\n          onChangeUsername={onChangeUsername}\n          onChangePassword={onChangePassword}\n          onSubmit={() => {\n            authService.logIn(username, password).catch((e) => {\n              if (e.response) {\n                setServerError(e.response?.data?.message);\n              } else {\n                setServerError('An error has occurred.');\n              }\n            });\n          }}\n        />\n      </Container>\n    </div>\n  );\n}\n"],"sourceRoot":""}
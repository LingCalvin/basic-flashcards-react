{"version":3,"sources":["auth/utils/credentials.utils.ts","router/components/protected-route.tsx","common/pages/lazy-loading-fallback.page.tsx","router/components/router-switch.tsx","theme.tsx","app.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx","auth/contexts/credentials.context.tsx","common/constants/api-client.ts","auth/services/auth.service.ts","user/services/user.service.ts","common/services/local-storage.service.ts","router/constants/routes.ts"],"names":["retrieve","user","userService","getCurrentUser","accessToken","localStorageService","getItem","ProtectedRoute","props","pathname","useLocation","authService","isAuthenticated","to","routes","login","search","encodeURIComponent","LazyLoadingFallbackPage","delay","useState","showProgress","setShowProgress","useEffect","timer","setTimeout","clearTimeout","LinearProgress","color","AccountSettingsPage","lazy","AddDeckPage","DashboardPage","DeckPage","LoginPage","RegistrationPage","HomePage","EditDeckPage","DeckSearchPage","RouterSwitch","credentials","useContext","CredentialsContext","fallback","exact","path","home","dashboard","accountSettings","deckView","deckAdd","deckEdit","deckSearch","registration","theme","createMuiTheme","palette","error","light","main","dark","typography","h1","fontSize","h2","h3","h4","h5","h6","App","setCredentials","syncCredentials","document","addEventListener","removeEventListener","Provider","value","ThemeProvider","CssBaseline","Boolean","window","location","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","getElementById","navigator","serviceWorker","ready","unregister","catch","console","message","createContext","apiClient","axios","create","baseURL","process","withCredentials","interceptors","request","use","config","headers","response","res","e","status","removeItem","http","username","password","a","this","post","data","decodedAccessToken","setItem","JSON","stringify","id","sub","token","get","accessTokenPayload","parse","currentPassword","newPassword","put","logOut","params","raw","key","localStorage","dispatchEvent","Event","decks"],"mappings":"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","file":"static/js/main.9581d2ce.chunk.js","sourcesContent":["import localStorageService from '../../common/services/local-storage.service';\nimport userService from '../../user/services/user.service';\n\nexport function retrieve() {\n  // TODO: check access token expiration\n  const user = userService.getCurrentUser();\n  const accessToken = localStorageService.getItem('accessToken');\n  if (!user || !accessToken) {\n    return null;\n  }\n  return { ...user, accessToken };\n}\n","import { Redirect, RouteProps, useLocation } from 'react-router';\nimport { Route } from 'react-router-dom';\nimport { authService } from '../../auth/services/auth.service';\nimport routes from '../constants/routes';\n\ninterface ProtectedRouteProps extends RouteProps {\n  path: string;\n}\n\nexport default function ProtectedRoute(props: ProtectedRouteProps) {\n  const { pathname } = useLocation();\n  return authService.isAuthenticated() ? (\n    <Route {...props} />\n  ) : (\n    <Redirect\n      to={{\n        pathname: routes.login,\n        search: `?continue=${encodeURIComponent(pathname)}`,\n      }}\n    />\n  );\n}\n","import { LinearProgress } from '@material-ui/core';\nimport { useEffect, useState } from 'react';\n\ninterface LazyLoadingFallbackPageProps {\n  delay?: number;\n}\n\nexport default function LazyLoadingFallbackPage({\n  delay = 300,\n}: LazyLoadingFallbackPageProps) {\n  const [showProgress, setShowProgress] = useState(delay <= 0);\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setShowProgress(true);\n    }, delay);\n\n    return () => {\n      clearTimeout(timer);\n    };\n  }, [delay]);\n\n  return showProgress ? <LinearProgress color=\"secondary\" /> : <></>;\n}\n","import { Redirect, Route, Switch } from 'react-router-dom';\nimport routes from '../constants/routes';\nimport ProtectedRoute from './protected-route';\nimport { lazy, Suspense, useContext } from 'react';\nimport CredentialsContext from '../../auth/contexts/credentials.context';\nimport LazyLoadingFallbackPage from '../../common/pages/lazy-loading-fallback.page';\n\nconst AccountSettingsPage = lazy(\n  () => import('../../auth/pages/account-settings.page')\n);\nconst AddDeckPage = lazy(() => import('../../deck/pages/add-deck.page'));\nconst DashboardPage = lazy(\n  () => import('../../dashboard/pages/dashboard.page')\n);\nconst DeckPage = lazy(() => import('../../deck/pages/deck.page'));\nconst LoginPage = lazy(() => import('../../auth/pages/login.page'));\nconst RegistrationPage = lazy(\n  () => import('../../auth/pages/registration.page')\n);\nconst HomePage = lazy(() => import('../../dashboard/pages/home.page'));\nconst EditDeckPage = lazy(() => import('../../deck/pages/edit-deck.page'));\nconst DeckSearchPage = lazy(() => import('../../deck/pages/deck-search.page'));\n\nexport default function RouterSwitch() {\n  const credentials = useContext(CredentialsContext);\n  return (\n    <Suspense fallback={<LazyLoadingFallbackPage />}>\n      <Switch>\n        <Route exact path={routes.home}>\n          {credentials ? <Redirect to={routes.dashboard} /> : <HomePage />}\n        </Route>\n        <ProtectedRoute path={routes.accountSettings}>\n          <AccountSettingsPage />\n        </ProtectedRoute>\n        <ProtectedRoute path={routes.dashboard}>\n          <DashboardPage />\n        </ProtectedRoute>\n        <Route exact path={routes.deckView}>\n          <DeckPage />\n        </Route>\n        <ProtectedRoute path={routes.deckAdd}>\n          <AddDeckPage />\n        </ProtectedRoute>\n        <ProtectedRoute path={routes.deckEdit}>\n          <EditDeckPage />\n        </ProtectedRoute>\n        <Route path={routes.deckSearch}>\n          <DeckSearchPage />\n        </Route>\n        <Route path={routes.registration}>\n          <RegistrationPage />\n        </Route>\n        <Route path={routes.login}>\n          <LoginPage />\n        </Route>\n      </Switch>\n    </Suspense>\n  );\n}\n","import { createMuiTheme } from '@material-ui/core';\n\nconst theme = createMuiTheme({\n  palette: { error: { light: '#E94948', main: '#B00020', dark: '#790000' } },\n  typography: {\n    h1: { fontSize: '3.75rem' },\n    h2: { fontSize: '3rem' },\n    h3: { fontSize: '2.125rem' },\n    h4: { fontSize: '1.5rem' },\n    h5: { fontSize: '1.25rem' },\n    h6: { fontSize: '1.2rem' },\n  },\n});\n\nexport default theme;\n","import { CssBaseline, ThemeProvider } from '@material-ui/core';\nimport { useEffect, useState } from 'react';\nimport CredentialsContext from './auth/contexts/credentials.context';\nimport Credentials from './auth/interfaces/credentials';\nimport { retrieve } from './auth/utils/credentials.utils';\nimport RouterSwitch from './router/components/router-switch';\nimport theme from './theme';\n\nexport default function App() {\n  const [credentials, setCredentials] = useState<Credentials | null>(retrieve);\n\n  useEffect(() => {\n    const syncCredentials = () => {\n      setCredentials(retrieve);\n    };\n    document.addEventListener('localStorageServiceChange', syncCredentials);\n    return () =>\n      document.removeEventListener(\n        'localStorageServiceChange',\n        syncCredentials\n      );\n  }, []);\n\n  return (\n    <>\n      <CredentialsContext.Provider value={credentials}>\n        <ThemeProvider theme={theme}>\n          <CssBaseline />\n          <RouterSwitch />\n        </ThemeProvider>\n      </CredentialsContext.Provider>\n    </>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { StrictMode } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\nimport { HashRouter } from 'react-router-dom';\nimport '@fontsource/roboto/300.css';\nimport '@fontsource/roboto/400.css';\nimport '@fontsource/roboto/500.css';\nimport '@fontsource/roboto/700.css';\n\nReactDOM.render(\n  <StrictMode>\n    <HashRouter>\n      <App />\n    </HashRouter>\n  </StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import { createContext } from 'react';\nimport Credentials from '../interfaces/credentials';\n\nconst CredentialsContext = createContext<Credentials | null>(null);\nexport default CredentialsContext;\n","import axios from 'axios';\nimport localStorageService from '../services/local-storage.service';\n\nconst apiClient = axios.create({\n  baseURL: process.env.REACT_APP_API_URL,\n  withCredentials: true,\n});\n\n// Send the access token with requests if present\napiClient.interceptors.request.use((config) => {\n  const accessToken = localStorageService.getItem('accessToken');\n  if (accessToken) {\n    config.headers['Authorization'] = `Bearer ${accessToken}`;\n  }\n  return config;\n});\n\napiClient.interceptors.response.use(\n  (res) => res,\n  (e) => {\n    if (e?.response?.status === 401) {\n      localStorageService.removeItem('accessToken');\n    }\n    throw e;\n  }\n);\nexport default apiClient;\n","import { AxiosInstance } from 'axios';\nimport apiClient from '../../common/constants/api-client';\nimport localStorageService from '../../common/services/local-storage.service';\nimport { LogInResponse } from '../interfaces/log-in-response';\n\nexport class AuthService {\n  constructor(private http: AxiosInstance) {}\n\n  async logIn(username: string, password: string) {\n    const {\n      data: { accessToken, decodedAccessToken },\n    } = await this.http.post<LogInResponse>('/auth/access-tokens', {\n      username,\n      password,\n    });\n    localStorageService.setItem('accessToken', accessToken);\n    localStorageService.setItem(\n      'accessTokenPayload',\n      JSON.stringify(decodedAccessToken)\n    );\n    localStorageService.setItem(\n      'user',\n      JSON.stringify({ id: decodedAccessToken.sub, username })\n    );\n    return decodedAccessToken;\n  }\n\n  async logOut() {\n    localStorageService.removeItem('accessToken');\n    localStorageService.removeItem('accessTokenPayload');\n    localStorageService.removeItem('user');\n    // TODO: Revoke token from server\n  }\n\n  async verifyAccessToken(token: string): Promise<boolean> {\n    try {\n      await this.http.get(`/auth/access-tokens/${token}`);\n      return true;\n    } catch {\n      return false;\n    }\n  }\n\n  isAuthenticated(): boolean {\n    return localStorageService.getItem('accessToken') !== null;\n  }\n\n  getCurrentUser(): string | null {\n    const accessTokenPayload =\n      localStorageService.getItem('accessTokenPayload');\n    if (!accessTokenPayload) {\n      return null;\n    }\n    return JSON.parse(accessTokenPayload).sub;\n  }\n\n  async changePassword(currentPassword: string, newPassword: string) {\n    await this.http.put(`/users/${this.getCurrentUser()}/password`, {\n      currentPassword,\n      newPassword,\n    });\n    await this.logOut();\n  }\n}\n\nexport const authService = new AuthService(apiClient);\n","import { AxiosInstance } from 'axios';\nimport apiClient from '../../common/constants/api-client';\nimport localStorageService from '../../common/services/local-storage.service';\nimport CreateParams from '../interfaces/create-params';\nimport User from '../interfaces/user';\n\nexport class UserService {\n  constructor(private http: AxiosInstance) {}\n  create(params: CreateParams) {\n    return this.http.post('/users', params);\n  }\n\n  getCurrentUser(): User | null {\n    const raw = localStorageService.getItem('user');\n    if (!raw) {\n      return null;\n    }\n    return JSON.parse(raw);\n  }\n}\n\nconst userService = new UserService(apiClient);\nexport default userService;\n","export class LocalStorageService {\n  getItem(key: string): string | null {\n    return localStorage.getItem(key);\n  }\n\n  removeItem(key: string): void {\n    localStorage.removeItem(key);\n    document.dispatchEvent(new Event('localStorageServiceChange'));\n  }\n\n  setItem(key: string, value: string) {\n    localStorage.setItem(key, value);\n    document.dispatchEvent(new Event('localStorageServiceChange'));\n  }\n}\n\nconst localStorageService = new LocalStorageService();\nexport default localStorageService;\n","const routes = {\n  home: '/',\n  accountSettings: '/account/settings',\n  dashboard: '/dashboard',\n  decks: '/decks',\n  deckSearch: '/search',\n  deckAdd: '/add-deck',\n  deckEdit: '/decks/:id/edit',\n  deckView: '/decks/:id',\n  login: '/auth/login',\n  registration: '/auth/register',\n};\n\nexport default routes;\n"],"sourceRoot":""}
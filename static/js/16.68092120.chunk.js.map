{"version":3,"sources":["deck/services/decks.service.ts","common/components/loadable-component.styles.tsx","common/components/loadable-component.tsx","common/components/link.tsx","dashboard/components/deck-info-tile.styles.tsx","dashboard/components/deck-info-tile.tsx","router/utils/route.utils.ts","deck/pages/deck-search.page.styles.tsx","common/utils/math.utils.ts","deck/pages/deck-search.page.tsx"],"names":["decksService","http","a","title","description","visibility","cards","this","post","authorId","authService","getCurrentUser","map","sides","frontText","text","backText","data","id","get","findOneDeckResponseToDeck","params","decks","count","put","cardId","delete","apiClient","card","tags","useStyles","makeStyles","root","display","justifyContent","LoadableComponent","loading","children","className","delay","classes","useState","showProgress","setShowProgress","useEffect","timeout","setTimeout","clearTimeout","clsx","CircularProgress","Link","to","color","component","RouterLink","theme","padding","spacing","textOverflow","overflow","whiteSpace","buttonBox","deleteButton","palette","error","main","DeckInfoTile","deckId","numberOfCards","author","onDelete","onExport","onEdit","Paper","Typography","variant","onClick","e","stopPropagation","Button","content","height","paginationContainer","flexDirection","gap","paginationControls","results","emptyResults","alignItems","textAlign","emptyResultsIcon","fontSize","typography","h1","clamp","min","max","value","Math","DeckSearchPage","deckSlice","setDeckSlice","totalDecks","setTotalDecks","search","useLocation","qs","URLSearchParams","term","pageSizeString","pageSize","MathUtils","numberOfPages","ceil","pageString","page","from","setLoading","history","useHistory","replace","toString","findAll","titleContains","caseInsensitive","take","skip","then","finally","deck","length","Pagination","onChange","_e","push","pathname","routes","deckSearch","encodeURIComponent","disabled","Search"],"mappings":"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","file":"static/js/16.68092120.chunk.js","sourcesContent":["import { AxiosInstance } from 'axios';\nimport { authService } from '../../auth/services/auth.service';\nimport apiClient from '../../common/constants/api-client';\nimport Deck from '../interfaces/deck';\nimport { FindAllDecksParams } from '../interfaces/find-all-decks-params';\nimport { FindAllDecksResponse } from '../interfaces/find-all-decks-response';\nimport FindOneDeckResponse from '../interfaces/find-one-deck-response';\n\nexport class DecksService {\n  constructor(private http: AxiosInstance) {}\n\n  async create({ title, description, visibility, cards }: Deck) {\n    const { data } = await this.http.post('/decks', {\n      authorId: authService.getCurrentUser(),\n      title,\n      description,\n      visibility,\n      cards: cards.map(\n        ({ sides: [{ text: frontText }, { text: backText }] }) => ({\n          frontText,\n          backText,\n        })\n      ),\n    });\n    return data;\n  }\n\n  async findOne(id: string): Promise<Deck | null> {\n    const { data } = await this.http.get<FindOneDeckResponse>(`/decks/${id}`);\n    return findOneDeckResponseToDeck(data);\n  }\n\n  async findAll(\n    params: FindAllDecksParams\n  ): Promise<{ decks: Deck[]; count: number }> {\n    const { data } = await this.http.get<FindAllDecksResponse>(`/decks`, {\n      params,\n    });\n\n    return {\n      decks: data.decks.map(findOneDeckResponseToDeck),\n      count: data.count,\n    };\n  }\n\n  async update({ id, title, description, visibility, cards }: Deck) {\n    const { data } = await this.http.put(`/decks/${id}`, {\n      authorId: authService.getCurrentUser(),\n      title,\n      description,\n      visibility,\n      cards: cards.map(\n        ({ id: cardId, sides: [{ text: frontText }, { text: backText }] }) => ({\n          id: cardId,\n          frontText,\n          backText,\n        })\n      ),\n    });\n    return data;\n  }\n\n  async remove(id: string) {\n    return this.http.delete(`/decks/${id}`);\n  }\n}\n\nexport const decksService = new DecksService(apiClient);\n\nfunction findOneDeckResponseToDeck(data: FindOneDeckResponse): Deck {\n  const { id, authorId, title, description, visibility } = data;\n  return {\n    id,\n    authorId,\n    title,\n    description,\n    visibility,\n    cards: data.cards.map((card) => ({\n      id: card.id,\n      sides: [{ text: card.frontText }, { text: card.backText }],\n    })),\n    tags: [],\n  };\n}\n","import { makeStyles } from '@material-ui/core';\n\nconst useStyles = makeStyles({\n  root: {\n    display: 'flex',\n    justifyContent: 'center',\n  },\n});\n\nexport default useStyles;\n","import { CircularProgress } from '@material-ui/core';\nimport clsx from 'clsx';\nimport { ReactNode, useEffect, useState } from 'react';\nimport useStyles from './loadable-component.styles';\n\ninterface LoadableComponentProps {\n  loading?: boolean;\n  children: ReactNode;\n  className?: string;\n  delay?: number;\n}\n\nexport default function LoadableComponent({\n  loading,\n  children,\n  className,\n  delay = 300,\n}: LoadableComponentProps) {\n  const classes = useStyles();\n\n  const [showProgress, setShowProgress] = useState(delay <= 0);\n\n  useEffect(() => {\n    const timeout = setTimeout(() => {\n      setShowProgress(true);\n    }, delay);\n    return () => clearTimeout(timeout);\n  }, [delay]);\n\n  return loading ? (\n    <div className={clsx(classes.root, className)}>\n      {showProgress && <CircularProgress />}\n    </div>\n  ) : (\n    <>{children}</>\n  );\n}\n","import { Link as MuiLink, LinkProps as MuiLinkProps } from '@material-ui/core';\nimport { ReactNode } from 'react';\nimport {\n  Link as RouterLink,\n  LinkProps as RouterLinkProps,\n} from 'react-router-dom';\n\ninterface LinkProps {\n  to: RouterLinkProps['to'];\n  color?: MuiLinkProps['color'];\n  children?: ReactNode;\n}\n\nexport default function Link({ to, color, children }: LinkProps) {\n  return (\n    <MuiLink component={RouterLink} to={to} color={color}>\n      {children}\n    </MuiLink>\n  );\n}\n","import { makeStyles } from '@material-ui/core';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    padding: theme.spacing(2),\n  },\n  title: {\n    textOverflow: 'ellipsis',\n    overflow: 'hidden',\n    whiteSpace: 'nowrap',\n  },\n  buttonBox: {\n    display: 'flex',\n    justifyContent: 'flex-end',\n  },\n  deleteButton: {\n    color: theme.palette.error.main,\n  },\n}));\n\nexport default useStyles;\n","import { Button, Paper, Typography } from '@material-ui/core';\nimport Link from '../../common/components/link';\nimport { deckView } from '../../router/utils/route.utils';\nimport useStyles from './deck-info-tile.styles';\n\ninterface DeckInfoTileProps {\n  title: string;\n  deckId: string;\n  numberOfCards: number;\n  author?: string;\n  onDelete?: () => void;\n  onExport?: () => void;\n  onEdit?: () => void;\n}\n\nexport default function DeckInfoTile({\n  title,\n  deckId,\n  numberOfCards,\n  author,\n  onDelete,\n  onExport,\n  onEdit,\n}: DeckInfoTileProps) {\n  const classes = useStyles();\n  return (\n    <Paper className={classes.root}>\n      <Link to={deckView(deckId)}>\n        <Typography className={classes.title} variant=\"h5\" component=\"div\">\n          {title}\n        </Typography>\n      </Link>\n      <Typography>{`${numberOfCards} cards`}</Typography>\n      {author && (\n        <Typography\n          onClick={(e: React.MouseEvent<HTMLSpanElement, MouseEvent>) =>\n            e.stopPropagation()\n          }\n          component=\"span\"\n        >\n          By <Link to={`/users/${author}`}>{author}</Link>\n        </Typography>\n      )}\n      {(onDelete || onExport || onEdit) && (\n        <div className={classes.buttonBox}>\n          {onDelete && (\n            <Button\n              className={classes.deleteButton}\n              onClick={(e) => {\n                e.stopPropagation();\n                onDelete();\n              }}\n            >\n              Delete\n            </Button>\n          )}\n          {onExport && (\n            <Button\n              onClick={(e) => {\n                e.stopPropagation();\n                onExport();\n              }}\n            >\n              Export\n            </Button>\n          )}\n          {onEdit && (\n            <Button\n              color=\"primary\"\n              onClick={(e: any) => {\n                e.stopPropagation();\n                onEdit();\n              }}\n            >\n              Edit\n            </Button>\n          )}\n        </div>\n      )}\n    </Paper>\n  );\n}\n","export function deckEdit(id: string) {\n  return `/decks/${id}/edit`;\n}\n\nexport function deckView(id: string) {\n  return `/decks/${id}`;\n}\n","import { makeStyles } from '@material-ui/core';\n\nconst useStyles = makeStyles((theme) => ({\n  content: {\n    height: '100%',\n    padding: theme.spacing(3),\n  },\n  paginationContainer: {\n    display: 'flex',\n    flexDirection: 'column',\n    gap: theme.spacing(2),\n  },\n  paginationControls: {\n    display: 'flex',\n    justifyContent: 'center',\n  },\n  results: {\n    display: 'flex',\n    flexDirection: 'column',\n    gap: theme.spacing(1),\n  },\n  emptyResults: {\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    justifyContent: 'center',\n    textAlign: 'center',\n    height: '100%',\n  },\n  emptyResultsIcon: {\n    fontSize: theme.typography.h1.fontSize,\n  },\n}));\n\nexport default useStyles;\n","/**\n * Returns the result of constraining an inclusive range.\n *\n * @param min - The minimum value the result can be\n * @param max - The maximum value the result can be\n * @param value - The value to constrain\n * @returns The value of `value` if `min <= value <= max`, `min` if `value < min`, and `max` if `value > max`\n */\nexport function clamp(min: number, max: number, value: number): number {\n  return Math.max(min, Math.min(max, value));\n}\n","import { Pagination } from '@material-ui/lab';\nimport { useEffect, useState } from 'react';\nimport { useHistory, useLocation } from 'react-router';\nimport LoadableComponent from '../../common/components/loadable-component';\nimport DeckInfoTile from '../../dashboard/components/deck-info-tile';\nimport routes from '../../router/constants/routes';\nimport Deck from '../interfaces/deck';\nimport { decksService } from '../services/decks.service';\nimport useStyles from './deck-search.page.styles';\nimport * as MathUtils from '../../common/utils/math.utils';\nimport { Search } from '@material-ui/icons';\nimport { Typography } from '@material-ui/core';\n\nexport default function DeckSearchPage() {\n  const classes = useStyles();\n\n  const [deckSlice, setDeckSlice] = useState<Deck[]>([]);\n  const [totalDecks, setTotalDecks] = useState(0);\n\n  const { search } = useLocation();\n  const qs = new URLSearchParams(search);\n\n  const term = qs.get('term') ?? '';\n\n  const pageSizeString = qs.get('pageSize');\n  const pageSize = MathUtils.clamp(\n    1,\n    50,\n    pageSizeString ? +pageSizeString : 10\n  );\n\n  const numberOfPages = Math.max(1, Math.ceil(totalDecks / pageSize));\n\n  const pageString = qs.get('page');\n  const page = MathUtils.clamp(1, numberOfPages, pageString ? +pageString : 1);\n\n  const from = qs.get('from');\n\n  const [loading, setLoading] = useState(true);\n\n  const history = useHistory();\n\n  // Remove the from search param\n  useEffect(() => {\n    if (from) {\n      qs.delete('from');\n      history.replace({ search: qs.toString() });\n    }\n  });\n\n  useEffect(() => {\n    // Do not send a request if the from param is being removed\n    if (from) {\n      return;\n    }\n    if (!term) {\n      setLoading(false);\n      setDeckSlice([]);\n      return;\n    }\n    setLoading(true);\n    decksService\n      .findAll({\n        titleContains: term,\n        caseInsensitive: true,\n        take: pageSize,\n        skip: (page - 1) * pageSize,\n      })\n      .then(({ decks, count }) => {\n        setDeckSlice(decks);\n        setTotalDecks(count);\n      })\n      .finally(() => setLoading(false));\n  }, [from, page, pageSize, term]);\n\n  const results = (\n    <main className={classes.paginationContainer}>\n      <Typography variant=\"h1\">Results</Typography>\n      <div className={classes.results}>\n        {deckSlice.map((deck) => (\n          <DeckInfoTile\n            key={deck.id}\n            deckId={deck.id ?? ''}\n            title={deck.title}\n            numberOfCards={deck.cards.length}\n            author={deck.authorId ?? ''}\n          />\n        ))}\n      </div>\n      {totalDecks / pageSize > 1 && (\n        <div className={classes.paginationControls}>\n          <Pagination\n            count={numberOfPages}\n            page={page}\n            onChange={(_e, value) =>\n              history.push({\n                pathname: routes.deckSearch,\n                search: `?term=${encodeURIComponent(\n                  term\n                )}&page=${encodeURIComponent(\n                  value\n                )}&pageSize=${encodeURIComponent(pageSize)}`,\n              })\n            }\n            disabled={loading}\n          />\n        </div>\n      )}\n    </main>\n  );\n\n  const emptyResults = (\n    <div className={classes.emptyResults}>\n      <Search className={classes.emptyResultsIcon} />\n      <Typography variant=\"h4\" component=\"div\">\n        No results found\n      </Typography>\n      <Typography>Enter a new search and results will show up here.</Typography>\n    </div>\n  );\n\n  return (\n    <div className={classes.content}>\n      <LoadableComponent loading={loading}>\n        {totalDecks > 0 ? results : emptyResults}\n      </LoadableComponent>\n    </div>\n  );\n}\n"],"sourceRoot":""}
{"version":3,"sources":["auth/contexts/authentication-status-update.context.ts","auth/contexts/authentication-status.context.ts","common/constants/paths.ts","dashboard/components/app-bar.tsx","dashboard/pages/dashboard.page.tsx","auth/configs/auth.config.ts","common/constants/api-client.ts","auth/services/auth.service.ts","deck/services/decks.service.ts","common/components/link.tsx","dashboard/components/deck-info-tile.styles.tsx","dashboard/components/deck-info-tile.tsx","dashboard/pages/home.page.styles.tsx","dashboard/pages/home.page.tsx","deck/components/card-list.styles.tsx","deck/components/card-list.tsx","card/components/card-side.styles.tsx","card/components/card-side.tsx","card/components/card.styles.tsx","card/components/card.tsx","deck/components/deck-stack.styles.tsx","deck/components/deck-stack.tsx","deck/components/deck-stack-controls.styles.tsx","deck/components/deck-stack-controls.tsx","deck/pages/deck.page.styles.tsx","deck/pages/deck.page.tsx","router.tsx","app.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["AuthenticationStatusUpdateContext","createContext","AuthenticationStatusContext","loggedIn","paths","home","dashboard","decks","AppBar","position","Toolbar","Typography","variant","DashboardPage","googleClientId","process","apiClient","axios","create","baseURL","withCredentials","interceptors","request","use","config","accessToken","localStorage","getItem","headers","authService","http","idToken","a","this","post","data","decodedAccessToken","setItem","JSON","stringify","removeItem","token","get","decksService","id","findOneDeckResponseToDeck","params","map","count","authorId","title","description","cards","card","sides","text","frontText","backText","tags","Link","to","color","children","component","RouterLink","useStyles","makeStyles","theme","root","cursor","padding","spacing","backgroundColor","palette","grey","DeckInfoTile","numberOfCards","author","onClick","classes","Paper","className","backDrop","zIndex","appBar","loginSection","primary","dark","contrastText","display","flexDirection","alignItems","gap","exampleDecksContainer","exampleDecksSection","marginLeft","marginRight","HomePage","useState","loggingIn","setLoggingIn","updateAuthenticationStatus","useContext","history","useHistory","exampleDecks","setExampleDecks","useEffect","findAll","orderTitleBy","take","then","Backdrop","open","CircularProgress","clientId","responseType","onRequest","onSuccess","res","logIn","tokenId","finally","onFailure","deck","length","push","gridTemplateColumns","columnGap","CardList","Fragment","Divider","orientation","justifyContent","content","textAlign","typography","fontSize","h5","CardSide","clsx","CardContent","gridTemplateAreas","transformStyle","cardFlipTransition","transition","flip","transform","cardSide","gridArea","backfaceVisibility","cardBack","Card","showBack","onFlip","height","width","hiddenCard","DeckStack","activeIndex","showCardBack","onFlipCard","activeCard","unmount","setUnmount","useLayoutEffect","positionIndicator","DeckStackControls","currentIndex","onBack","onForward","IconButton","disabled","ArrowBack","align","ArrowForward","margin","deckStack","maxWidth","deckStackContainer","section","progressBar","tagList","flexWrap","DeckPage","activeCardIndex","setActiveCardIndex","setShowCardBack","deckId","useParams","loading","setLoading","setDeck","findOne","sortedTags","useMemo","sort","state","Slider","value","max","valueLabelFormat","onChange","_event","tag","Chip","label","Router","isAuthenticated","exact","path","App","Date","parse","exp","authenticationStatus","setAuthenticatinStatus","CssBaseline","Provider","update","Boolean","window","location","hostname","match","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ffed1c85.chunk.js","sourcesContent":["import { createContext } from 'react';\nimport AuthenticationStatus from '../interfaces/authentication-status';\n\n/** Context for passing a callback to update authentication status. */\nexport const AuthenticationStatusUpdateContext = createContext<\n  (update: Partial<AuthenticationStatus>) => void\n>(() => {});\n","import { createContext } from 'react';\nimport AuthenticationStatus from '../interfaces/authentication-status';\n\nexport const AuthenticationStatusContext = createContext<AuthenticationStatus>({\n  loggedIn: false,\n});\n","const paths = {\n  home: '/',\n  dashboard: '/dashboard',\n  decks: '/decks',\n};\n\nexport default paths;\n","import { AppBar as MuiAppBar, Toolbar, Typography } from '@material-ui/core';\n\nexport default function AppBar() {\n  return (\n    <MuiAppBar position=\"sticky\">\n      <Toolbar>\n        <Typography variant=\"h6\">Basic Flashcards</Typography>\n      </Toolbar>\n    </MuiAppBar>\n  );\n}\n","import AppBar from '../components/app-bar';\n\nexport default function DashboardPage() {\n  return <AppBar />;\n}\n","export const googleClientId = process.env.REACT_APP_GOOGLE_CLIENT_ID ?? '';\n","import axios from 'axios';\n\nconst apiClient = axios.create({\n  baseURL: process.env.REACT_APP_API_URL,\n  withCredentials: true,\n});\n\n\n// Send the access token with requests if present\napiClient.interceptors.request.use((config) => {\n  const accessToken = localStorage.getItem('accessToken');\n  if (accessToken) {\n    config.headers['Authorization'] = `Bearer ${accessToken}`;\n  }\n  return config;\n});\n\nexport default apiClient;\n","import { AxiosInstance } from 'axios';\nimport apiClient from '../../common/constants/api-client';\nimport { LogInResponse } from '../interfaces/log-in-response';\n\nexport class AuthService {\n  constructor(private http: AxiosInstance) {}\n\n  async logIn(idToken: string) {\n    const {\n      data: { accessToken, decodedAccessToken },\n    } = await this.http.post<LogInResponse>('/auth/access-tokens', {\n      idToken,\n    });\n    localStorage.setItem('accessToken', accessToken);\n    localStorage.setItem(\n      'accessTokenPayload',\n      JSON.stringify(decodedAccessToken)\n    );\n    return decodedAccessToken;\n  }\n\n  async logOut() {\n    localStorage.removeItem('accessToken');\n    localStorage.removeItem('accessTokenPayload');\n    // TODO: Revoke token from server\n  }\n\n  async verifyAccessToken(token: string): Promise<boolean> {\n    try {\n      await this.http.get(`/auth/access-tokens/${token}`);\n      return true;\n    } catch {\n      return false;\n    }\n  }\n}\n\nexport const authService = new AuthService(apiClient);\n","import { AxiosInstance } from 'axios';\nimport apiClient from '../../common/constants/api-client';\nimport Deck from '../interfaces/deck';\nimport { FindAllDecksParams } from '../interfaces/find-all-decks-params';\nimport { FindAllDecksResponse } from '../interfaces/find-all-decks-response';\nimport FindOneDeckResponse from '../interfaces/find-one-deck-response';\n\nexport class DecksService {\n  constructor(private http: AxiosInstance) {}\n\n  async findOne(id: string): Promise<Deck | null> {\n    const { data } = await this.http.get<FindOneDeckResponse>(`/decks/${id}`);\n    return findOneDeckResponseToDeck(data);\n  }\n\n  async findAll(\n    params: FindAllDecksParams\n  ): Promise<{ decks: Deck[]; count: number }> {\n    const { data } = await this.http.get<FindAllDecksResponse>(`/decks`, {\n      params,\n    });\n\n    return {\n      decks: data.decks.map(findOneDeckResponseToDeck),\n      count: data.count,\n    };\n  }\n}\n\nexport const decksService = new DecksService(apiClient);\n\nfunction findOneDeckResponseToDeck(data: FindOneDeckResponse): Deck {\n  const { id, authorId, title, description } = data;\n  return {\n    id,\n    authorId,\n    title,\n    description,\n    cards: data.cards.map((card) => ({\n      sides: [{ text: card.frontText }, { text: card.backText }],\n    })),\n    tags: [],\n  };\n}\n","import { Link as MuiLink, LinkProps as MuiLinkProps } from '@material-ui/core';\nimport { ReactNode } from 'react';\nimport {\n  Link as RouterLink,\n  LinkProps as RouterLinkProps,\n} from 'react-router-dom';\n\ninterface LinkProps {\n  to: RouterLinkProps['to'];\n  color?: MuiLinkProps['color'];\n  children?: ReactNode;\n}\n\nexport default function Link({ to, color, children }: LinkProps) {\n  return (\n    <MuiLink component={RouterLink} to={to} color={color}>\n      {children}\n    </MuiLink>\n  );\n}\n","import { makeStyles } from '@material-ui/core';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    cursor: 'pointer',\n    padding: theme.spacing(2),\n    '&:hover': {\n      backgroundColor: theme.palette.grey[50],\n    },\n  },\n}));\n\nexport default useStyles;\n","import { Paper, Typography } from '@material-ui/core';\nimport Link from '../../common/components/link';\nimport useStyles from './deck-info-tile.styles';\n\ninterface DeckInfoTileProps {\n  title: string;\n  numberOfCards: number;\n  author: string;\n  onClick?: () => void;\n}\n\nexport default function DeckInfoTile({\n  title,\n  numberOfCards,\n  author,\n  onClick,\n}: DeckInfoTileProps) {\n  const classes = useStyles();\n  return (\n    <Paper className={classes.root} onClick={onClick}>\n      {/* <CardContent> */}\n      <Typography variant=\"h5\">{title}</Typography>\n      <Typography>{`${numberOfCards} cards`}</Typography>\n      <Typography>\n        By <Link to={`/users/${author}`}>{author}</Link>\n      </Typography>\n      {/* </CardContent> */}\n    </Paper>\n  );\n}\n","import { makeStyles } from '@material-ui/core';\n\nconst useStyles = makeStyles((theme) => ({\n  backDrop: {\n    zIndex: theme.zIndex.appBar + 1,\n  },\n  loginSection: {\n    backgroundColor: theme.palette.primary.dark,\n    color: theme.palette.primary.contrastText,\n    padding: theme.spacing(4),\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    gap: theme.spacing(2),\n  },\n  exampleDecksContainer: {\n    display: 'flex',\n    flexDirection: 'column',\n    gap: theme.spacing(1),\n  },\n  exampleDecksSection: {\n    marginLeft: theme.spacing(2),\n    marginRight: theme.spacing(2),\n  },\n}));\n\nexport default useStyles;\n","import { Backdrop, CircularProgress, Typography } from '@material-ui/core';\nimport { useContext, useEffect, useState } from 'react';\nimport { GoogleLogin, GoogleLoginResponse } from 'react-google-login';\nimport { useHistory } from 'react-router';\nimport { googleClientId } from '../../auth/configs/auth.config';\nimport { AuthenticationStatusUpdateContext } from '../../auth/contexts/authentication-status-update.context';\nimport { authService } from '../../auth/services/auth.service';\nimport paths from '../../common/constants/paths';\nimport Deck from '../../deck/interfaces/deck';\nimport { decksService } from '../../deck/services/decks.service';\nimport AppBar from '../components/app-bar';\nimport DeckInfoTile from '../components/deck-info-tile';\nimport useStyles from './home.page.styles';\n\nexport default function HomePage() {\n  const classes = useStyles();\n  const [loggingIn, setLoggingIn] = useState(false);\n  const updateAuthenticationStatus = useContext(\n    AuthenticationStatusUpdateContext\n  );\n\n  const history = useHistory();\n\n  const [exampleDecks, setExampleDecks] = useState<Deck[]>([]);\n\n  useEffect(() => {\n    decksService\n      .findAll({ orderTitleBy: 'asc', take: 3 })\n      .then(({ decks }) => setExampleDecks(decks));\n  }, []);\n\n  return (\n    <div>\n      <Backdrop className={classes.backDrop} open={loggingIn}>\n        <CircularProgress color=\"inherit\" />\n      </Backdrop>\n      <AppBar />\n      <main>\n        <div className={classes.loginSection}>\n          <Typography variant=\"h1\">Log in to create decks.</Typography>\n          <GoogleLogin\n            clientId={googleClientId}\n            responseType=\"id_token\"\n            onRequest={() => setLoggingIn(true)}\n            onSuccess={(res) => {\n              authService\n                .logIn((res as GoogleLoginResponse).tokenId)\n                .then(() => updateAuthenticationStatus({ loggedIn: true }))\n                .finally(() => setLoggingIn(false));\n            }}\n            onFailure={() => setLoggingIn(false)}\n          />\n        </div>\n        <div className={classes.exampleDecksSection}>\n          <Typography variant=\"h2\">Decks</Typography>\n          <div className={classes.exampleDecksContainer}>\n            {exampleDecks.map((deck) => (\n              <DeckInfoTile\n                key={deck.id}\n                title={deck.title}\n                numberOfCards={deck.cards.length}\n                author={deck.authorId ?? ''}\n                onClick={() => history.push(`${paths.decks}/${deck.id}`)}\n              />\n            ))}\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n}\n","import { makeStyles } from '@material-ui/core';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'grid',\n    gridTemplateColumns: '2fr auto 3fr',\n    columnGap: theme.spacing(2),\n    gap: theme.spacing(3),\n  },\n}));\n\nexport default useStyles;\n","import { Divider, Typography } from '@material-ui/core';\nimport React from 'react';\nimport Card from '../../card/interfaces/card';\nimport useStyles from './card-list.styles';\n\ninterface CardListProps {\n  cards: Card[];\n}\n\nexport default function CardList({ cards }: CardListProps) {\n  const classes = useStyles();\n  return (\n    <div className={classes.root}>\n      {cards.map((card) => (\n        <React.Fragment key={card.id ?? JSON.stringify(card)}>\n          <Typography>{card.sides[0].text}</Typography>\n          <Divider orientation=\"vertical\" />\n          <Typography>{card.sides[1].text}</Typography>\n        </React.Fragment>\n      ))}\n    </div>\n  );\n}\n","import { makeStyles } from '@material-ui/core';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n  },\n  content: {\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    textAlign: 'center',\n    padding: theme.spacing(3),\n  },\n  typography: {\n    fontSize: theme.typography.h5.fontSize,\n  },\n}));\n\nexport default useStyles;\n","import { Card as MuiCard, CardContent, Typography } from '@material-ui/core';\nimport clsx from 'clsx';\nimport useStyles from './card-side.styles';\n\ninterface CardSideProps {\n  text: string;\n  className?: string;\n}\n\nexport default function CardSide({ text, className }: CardSideProps) {\n  const classes = useStyles();\n  return (\n    <MuiCard className={clsx(classes.root, className)}>\n      <CardContent className={classes.content}>\n        <Typography className={classes.typography}>{text}</Typography>\n      </CardContent>\n    </MuiCard>\n  );\n}\n","import { makeStyles } from '@material-ui/core';\n\nconst useStyles = makeStyles({\n  root: {\n    display: 'grid',\n    gridTemplateAreas: '\"main\"',\n    transformStyle: 'preserve-3d',\n  },\n  cardFlipTransition: {\n    transition: 'transform 0.3s',\n  },\n  flip: {\n    transform: 'rotateX(180deg)',\n  },\n  cardSide: {\n    gridArea: 'main',\n    backfaceVisibility: 'hidden',\n  },\n  cardBack: {\n    transform: 'rotateX(180deg)',\n  },\n});\n\nexport default useStyles;\n","import clsx from 'clsx';\nimport CardSide from './card-side';\nimport useStyles from './card.styles';\n\ninterface CardProps {\n  frontText: string;\n  backText: string;\n  showBack: boolean;\n  className?: string;\n  onFlip: () => void;\n}\n\nexport default function Card({\n  frontText,\n  backText,\n  showBack,\n  className,\n  onFlip,\n}: CardProps) {\n  const classes = useStyles();\n  return (\n    <div\n      className={clsx(\n        classes.root,\n        classes.cardFlipTransition,\n        showBack && classes.flip,\n        className\n      )}\n      onClick={onFlip}\n    >\n      <CardSide className={classes.cardSide} text={frontText} />\n      <CardSide\n        className={clsx(classes.cardSide, classes.cardBack)}\n        text={backText}\n      />\n    </div>\n  );\n}\n","import { makeStyles } from '@material-ui/core';\n\nconst useStyles = makeStyles({\n  card: {\n    height: '100%',\n    width: '100%',\n  },\n  hiddenCard: {\n    display: 'none',\n  },\n});\n\nexport default useStyles;\n","import { useLayoutEffect, useState } from 'react';\nimport CardComponent from '../../card/components/card';\nimport Card from '../../card/interfaces/card';\nimport useStyles from './deck-stack.styles';\n\ninterface DeckStackProps {\n  cards: Card[];\n  activeIndex: number;\n  showCardBack: boolean;\n  className?: string;\n  onFlipCard: () => void;\n}\n\nexport default function DeckStack({\n  cards,\n  activeIndex,\n  showCardBack,\n  className,\n  onFlipCard,\n}: DeckStackProps) {\n  const activeCard = cards[activeIndex];\n  const classes = useStyles();\n\n  // Unmount the Card component each time the active card changes\n  const [unmount, setUnmount] = useState(false);\n\n  useLayoutEffect(() => {\n    setUnmount(true);\n  }, [activeIndex]);\n\n  useLayoutEffect(() => {\n    if (unmount) {\n      setUnmount(false);\n    }\n  }, [unmount]);\n\n  if (!activeCard) {\n    return (\n      <div className={className}>\n        {!unmount && (\n          <CardComponent\n            className={classes.card}\n            frontText=\"\"\n            backText=\"\"\n            showBack={false}\n            onFlip={() => {}}\n          />\n        )}\n      </div>\n    );\n  }\n  // return (\n  //   <div className={className}>\n  //     {!unmount && activeCard ? (\n  //       <CardComponent\n  //         className={classes.card}\n  //         frontText={activeCard.sides[0].text}\n  //         backText={activeCard.sides[1].text}\n  //         showBack={showCardBack}\n  //         onFlip={onFlipCard}\n  //       />\n  //     ) : (\n  //       placeholder\n  //     )}\n  //   </div>\n  // );\n\n  return (\n    <div className={className}>\n      {!unmount && (\n        <CardComponent\n          className={classes.card}\n          frontText={activeCard.sides[0].text}\n          backText={activeCard.sides[1].text}\n          showBack={showCardBack}\n          onFlip={onFlipCard}\n        />\n      )}\n    </div>\n  );\n}\n","import { makeStyles } from '@material-ui/core';\n\nconst useStyles = makeStyles({\n  root: {\n    display: 'flex',\n    alignItems: 'center',\n  },\n  positionIndicator: {\n    width: '10ch',\n  },\n});\n\nexport default useStyles;\n","import { IconButton, Typography } from '@material-ui/core';\nimport { ArrowBack, ArrowForward } from '@material-ui/icons';\nimport useStyles from './deck-stack-controls.styles';\n\ninterface DeckStackControlsProps {\n  currentIndex: number;\n  numberOfCards: number;\n  onBack: () => void;\n  onForward: () => void;\n}\n\nexport default function DeckStackControls({\n  currentIndex,\n  numberOfCards,\n  onBack,\n  onForward,\n}: DeckStackControlsProps) {\n  const classes = useStyles();\n  return (\n    <div className={classes.root}>\n      <IconButton\n        onClick={onBack}\n        disabled={currentIndex === 0 || numberOfCards === 0}\n      >\n        <ArrowBack />\n      </IconButton>\n      <div>\n        <Typography\n          variant=\"subtitle2\"\n          align=\"center\"\n          className={classes.positionIndicator}\n        >{`${\n          numberOfCards > 0 ? currentIndex + 1 : 0\n        }/${numberOfCards}`}</Typography>\n      </div>\n\n      <IconButton\n        onClick={onForward}\n        disabled={currentIndex === numberOfCards - 1 || numberOfCards === 0}\n      >\n        <ArrowForward />\n      </IconButton>\n    </div>\n  );\n}\n","import { makeStyles } from '@material-ui/core';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    flexDirection: 'column',\n    gap: theme.spacing(2),\n    margin: theme.spacing(3),\n  },\n  deckStack: {\n    height: 280,\n    width: '100%',\n    maxWidth: 397,\n  },\n  deckStackContainer: {\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n  },\n  section: {\n    display: 'flex',\n    flexDirection: 'column',\n    gap: theme.spacing(1),\n  },\n  progressBar: {\n    width: '100%',\n    maxWidth: 400,\n  },\n  tagList: {\n    display: 'flex',\n    flexWrap: 'wrap',\n    gap: theme.spacing(0.5),\n  },\n}));\n\nexport default useStyles;\n","import { Chip, Slider, Typography } from '@material-ui/core';\nimport { useEffect, useLayoutEffect, useMemo, useState } from 'react';\nimport { useParams } from 'react-router';\nimport Link from '../../common/components/link';\nimport AppBar from '../../dashboard/components/app-bar';\nimport CardList from '../components/card-list';\nimport DeckStack from '../components/deck-stack';\nimport DeckStackControls from '../components/deck-stack-controls';\nimport Deck from '../interfaces/deck';\nimport { decksService } from '../services/decks.service';\nimport useStyles from './deck.page.styles';\n\nexport default function DeckPage() {\n  const classes = useStyles();\n  const [activeCardIndex, setActiveCardIndex] = useState(0);\n  const [showCardBack, setShowCardBack] = useState(false);\n  const { id: deckId } = useParams<{ id: string }>();\n  const [loading, setLoading] = useState(true);\n\n  const [deck, setDeck] = useState<Deck | null>(null);\n\n  useEffect(() => {\n    setLoading(true);\n    decksService\n      .findOne(deckId)\n      .then((deck) => setDeck(deck))\n      .finally(() => setLoading(false));\n  }, [deckId]);\n\n  // Make sure the front of the card is showing when moving to another\n  useLayoutEffect(() => {\n    setShowCardBack(false);\n  }, [activeCardIndex]);\n\n  // Alphabetize deck tags\n  const sortedTags = useMemo(() => (deck?.tags ? [...deck.tags].sort() : []), [\n    deck?.tags,\n  ]);\n\n  return (\n    <div>\n      <AppBar />\n      {!loading && deck && (\n        <div className={classes.root}>\n          {/* Deck */}\n          <section className={classes.section}>\n            <div>\n              <Typography variant=\"h4\">{deck.title}</Typography>\n              <Typography variant=\"subtitle1\">\n                by{' '}\n                <Link to={`/users/${deck.authorId}`} color=\"inherit\">\n                  {deck.authorId}\n                </Link>\n              </Typography>\n            </div>\n            <div className={classes.deckStackContainer}>\n              <DeckStack\n                className={classes.deckStack}\n                cards={deck.cards}\n                activeIndex={activeCardIndex}\n                showCardBack={showCardBack}\n                onFlipCard={() => setShowCardBack((state) => !state)}\n              />\n              <DeckStackControls\n                currentIndex={activeCardIndex}\n                numberOfCards={deck.cards.length}\n                onBack={() => {\n                  setActiveCardIndex((state) => state - 1);\n                }}\n                onForward={() => {\n                  setActiveCardIndex((state) => state + 1);\n                }}\n              />\n              <Slider\n                className={classes.progressBar}\n                value={activeCardIndex}\n                max={deck.cards.length - 1}\n                valueLabelFormat={(value) => value + 1}\n                onChange={(_event, value) =>\n                  setActiveCardIndex(value as number)\n                }\n              />\n            </div>\n          </section>\n          {/* Tag list */}\n          <section className={classes.section}>\n            <Typography variant=\"h5\">Tags</Typography>\n            <div className={classes.tagList}>\n              {sortedTags.map((tag) => (\n                <Chip key={tag} label={tag} variant=\"outlined\" />\n              ))}\n            </div>\n          </section>\n          {/* Term list */}\n          <section className={classes.section}>\n            <Typography variant=\"h5\">Terms</Typography>\n            <CardList cards={deck.cards} />\n          </section>\n        </div>\n      )}\n    </div>\n  );\n}\n","import { HashRouter, Redirect, Route, Switch } from 'react-router-dom';\nimport paths from './common/constants/paths';\nimport DashboardPage from './dashboard/pages/dashboard.page';\nimport HomePage from './dashboard/pages/home.page';\nimport DeckPage from './deck/pages/deck.page';\n\ninterface RouterProps {\n  isAuthenticated?: boolean;\n}\n\nexport default function Router({ isAuthenticated }: RouterProps) {\n  return (\n    <HashRouter>\n      <Switch>\n        <Route exact path={paths.home}>\n          {!isAuthenticated ? <HomePage /> : <Redirect to={paths.dashboard} />}\n        </Route>\n        <Route path={paths.dashboard}>\n          <DashboardPage />\n        </Route>\n        <Route path={`${paths.decks}/:id`}>\n          <DeckPage />\n        </Route>\n      </Switch>\n    </HashRouter>\n  );\n}\n","import { CssBaseline } from '@material-ui/core';\nimport { useState } from 'react';\nimport { AuthenticationStatusUpdateContext } from './auth/contexts/authentication-status-update.context';\nimport { AuthenticationStatusContext } from './auth/contexts/authentication-status.context';\nimport AuthenticationStatus from './auth/interfaces/authentication-status';\nimport { LogInResponse } from './auth/interfaces/log-in-response';\nimport Router from './router';\n\nexport default function App() {\n  const [authenticationStatus, setAuthenticatinStatus] = useState({\n    loggedIn:\n      new Date(\n        (JSON.parse(\n          localStorage.getItem('accessTokenPayload') ?? '{\"exp\": 0}'\n        ) as LogInResponse['decodedAccessToken']).exp * 1000\n      ) > new Date(),\n  });\n\n  const updateAuthenticationStatus = (\n    update: Partial<AuthenticationStatus>\n  ) => {\n    setAuthenticatinStatus((state) => ({ ...state, ...update }));\n  };\n\n  return (\n    <>\n      <CssBaseline />\n      <AuthenticationStatusContext.Provider value={authenticationStatus}>\n        <AuthenticationStatusUpdateContext.Provider\n          value={updateAuthenticationStatus}\n        >\n          <Router isAuthenticated={authenticationStatus.loggedIn} />\n        </AuthenticationStatusUpdateContext.Provider>\n      </AuthenticationStatusContext.Provider>\n    </>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { StrictMode } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
{"version":3,"sources":["common/components/loadable-component.styles.tsx","common/components/loadable-component.tsx","deck/pages/edit-deck.page.tsx"],"names":["useStyles","makeStyles","root","display","justifyContent","LoadableComponent","loading","children","className","classes","clsx","CircularProgress","EditDeckPage","deckId","useParams","id","useState","submitting","setSubmitting","history","useHistory","deck","setDeck","setLoading","showSnackbar","setShowsSnackbar","snackbarMessage","setSnackbarMessage","useEffect","decksService","findOne","then","finally","open","backdrop","color","title","description","visibility","cards","onTitleChange","state","onDescriptionChange","onChangeVisibility","onCardsChange","onSubmit","update","tags","goBack","catch","message","autoHideDuration","onClose"],"mappings":"wMASeA,EAPGC,YAAW,CAC3BC,KAAM,CACJC,QAAS,OACTC,eAAgB,Y,OCML,SAASC,EAAT,GAIa,IAH1BC,EAGyB,EAHzBA,QACAC,EAEyB,EAFzBA,SACAC,EACyB,EADzBA,UAEMC,EAAUT,IAEhB,OAAOM,EACL,qBAAKE,UAAWE,YAAKD,EAAQP,KAAMM,GAAnC,SACE,cAACG,EAAA,EAAD,MAGF,mCAAGJ,M,0MCPQ,SAASK,IACtB,IAAMH,EAAUT,cACJa,EAAWC,cAAfC,GACR,EAAoCC,oBAAS,GAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACMC,EAAUC,cAEhB,EAAwBJ,mBAAsB,MAA9C,mBAAOK,EAAP,KAAaC,EAAb,KACA,EAA8BN,oBAAS,GAAvC,mBAAOV,EAAP,KAAgBiB,EAAhB,KAEA,EAAyCP,oBAAS,GAAlD,mBAAOQ,EAAP,KAAqBC,EAArB,KACA,EAA8CT,mBAAS,IAAvD,mBAAOU,EAAP,KAAwBC,EAAxB,KAUA,OARAC,qBAAU,WACRL,GAAW,GACXM,IACGC,QAAQjB,GACRkB,MAAK,SAACV,GAAD,OAAUC,EAAQD,MACvBW,SAAQ,kBAAMT,GAAW,QAC3B,CAACV,IAGF,qCACE,cAAC,IAAD,CAAUoB,KAAMhB,EAAYT,UAAWC,EAAQyB,SAA/C,SACE,cAAC,IAAD,CAAkBC,MAAM,cAE1B,cAAC,IAAD,CAAmB7B,QAASA,EAA5B,SACGe,GACC,cAAC,IAAD,UACE,cAAC,IAAD,CACEe,MAAOf,EAAKe,MACZC,YAAahB,EAAKgB,YAClBC,WAAYjB,EAAKiB,WACjBC,MAAOlB,EAAKkB,MACZC,cAAe,SAACJ,GAAD,OACbd,GAAQ,SAACmB,GACP,OAAKA,EAGE,2BAAKA,GAAZ,IAAmBL,UAFVK,MAKbC,oBAAqB,SAACL,GAAD,OACnBf,GAAQ,SAACmB,GACP,OAAKA,EAGE,2BAAKA,GAAZ,IAAmBJ,gBAFVI,MAKbE,mBAAoB,SAACL,GAAD,OAClBhB,GAAQ,SAACmB,GACP,OAAKA,EAGE,2BAAKA,GAAZ,IAAmBH,eAFVG,MAKbG,cAAe,SAACL,GAAD,OACbjB,GAAQ,SAACmB,GACP,OAAKA,EAGE,2BAAKA,GAAZ,IAAmBF,UAFVE,MAKbI,SAAU,WACR3B,GAAc,GACdW,IACGiB,OAAO,CACN/B,GAAIM,EAAKN,GACTqB,MAAOf,EAAKe,MACZC,YAAahB,EAAKgB,YAClBC,WAAYjB,EAAKiB,WACjBC,MAAOlB,EAAKkB,MACZQ,KAAM,KAEPhB,MAAK,kBAAMZ,EAAQ6B,YACnBC,OAAM,WACLtB,EAAmB,0BACnBF,GAAiB,GACjBP,GAAc,aAO5B,cAAC,IAAD,CACEe,KAAMT,EACN0B,QAASxB,EACTyB,iBAAkBA,IAClBC,QAAS,kBAAM3B,GAAiB","file":"static/js/16.4d8e70db.chunk.js","sourcesContent":["import { makeStyles } from '@material-ui/core';\n\nconst useStyles = makeStyles({\n  root: {\n    display: 'flex',\n    justifyContent: 'center',\n  },\n});\n\nexport default useStyles;\n","import { CircularProgress } from '@material-ui/core';\nimport clsx from 'clsx';\nimport { ReactNode } from 'react';\nimport useStyles from './loadable-component.styles';\n\ninterface LoadableComponentProps {\n  loading?: boolean;\n  children: ReactNode;\n  className?: string;\n}\n\nexport default function LoadableComponent({\n  loading,\n  children,\n  className,\n}: LoadableComponentProps) {\n  const classes = useStyles();\n\n  return loading ? (\n    <div className={clsx(classes.root, className)}>\n      <CircularProgress />\n    </div>\n  ) : (\n    <>{children}</>\n  );\n}\n","import {\n  Backdrop,\n  CircularProgress,\n  Container,\n  Snackbar,\n} from '@material-ui/core';\nimport { useEffect, useState } from 'react';\nimport { useHistory } from 'react-router';\nimport { useParams } from 'react-router-dom';\nimport LoadableComponent from '../../common/components/loadable-component';\nimport { autoHideDuration } from '../../common/constants/snackbar';\nimport EditDeckForm from '../components/edit-deck-form';\nimport Deck from '../interfaces/deck';\nimport { decksService } from '../services/decks.service';\nimport useStyles from './add-deck.page.styles';\n\nexport default function EditDeckPage() {\n  const classes = useStyles();\n  const { id: deckId } = useParams<{ id: string }>();\n  const [submitting, setSubmitting] = useState(false);\n  const history = useHistory();\n\n  const [deck, setDeck] = useState<Deck | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  const [showSnackbar, setShowsSnackbar] = useState(false);\n  const [snackbarMessage, setSnackbarMessage] = useState('');\n\n  useEffect(() => {\n    setLoading(true);\n    decksService\n      .findOne(deckId)\n      .then((deck) => setDeck(deck))\n      .finally(() => setLoading(false));\n  }, [deckId]);\n\n  return (\n    <>\n      <Backdrop open={submitting} className={classes.backdrop}>\n        <CircularProgress color=\"inherit\" />\n      </Backdrop>\n      <LoadableComponent loading={loading}>\n        {deck && (\n          <Container>\n            <EditDeckForm\n              title={deck.title}\n              description={deck.description}\n              visibility={deck.visibility}\n              cards={deck.cards}\n              onTitleChange={(title) =>\n                setDeck((state) => {\n                  if (!state) {\n                    return state;\n                  }\n                  return { ...state, title };\n                })\n              }\n              onDescriptionChange={(description) =>\n                setDeck((state) => {\n                  if (!state) {\n                    return state;\n                  }\n                  return { ...state, description };\n                })\n              }\n              onChangeVisibility={(visibility) =>\n                setDeck((state) => {\n                  if (!state) {\n                    return state;\n                  }\n                  return { ...state, visibility };\n                })\n              }\n              onCardsChange={(cards) =>\n                setDeck((state) => {\n                  if (!state) {\n                    return state;\n                  }\n                  return { ...state, cards };\n                })\n              }\n              onSubmit={() => {\n                setSubmitting(true);\n                decksService\n                  .update({\n                    id: deck.id,\n                    title: deck.title,\n                    description: deck.description,\n                    visibility: deck.visibility,\n                    cards: deck.cards,\n                    tags: [],\n                  })\n                  .then(() => history.goBack())\n                  .catch(() => {\n                    setSnackbarMessage('Failed to update deck.');\n                    setShowsSnackbar(true);\n                    setSubmitting(false);\n                  });\n              }}\n            />\n          </Container>\n        )}\n      </LoadableComponent>\n      <Snackbar\n        open={showSnackbar}\n        message={snackbarMessage}\n        autoHideDuration={autoHideDuration}\n        onClose={() => setShowsSnackbar(false)}\n      />\n    </>\n  );\n}\n"],"sourceRoot":""}
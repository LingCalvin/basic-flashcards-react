{"version":3,"sources":["auth/contexts/authentication-status-update.context.ts","auth/contexts/authentication-status.context.ts","common/constants/paths.ts","dashboard/components/app-bar.tsx","dashboard/pages/dashboard.page.tsx","auth/configs/auth.config.ts","common/constants/api-client.ts","auth/services/auth.service.ts","dashboard/pages/home.page.styles.tsx","dashboard/pages/home.page.tsx","deck/components/card-list.styles.tsx","deck/components/card-list.tsx","card/components/card-side.styles.tsx","card/components/card-side.tsx","card/components/card.styles.tsx","card/components/card.tsx","deck/components/deck-stack.styles.tsx","deck/components/deck-stack.tsx","deck/components/deck-stack-controls.styles.tsx","deck/components/deck-stack-controls.tsx","deck/services/decks.service.ts","deck/pages/deck.page.styles.tsx","deck/pages/deck.page.tsx","router.tsx","app.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["AuthenticationStatusUpdateContext","createContext","AuthenticationStatusContext","loggedIn","paths","home","dashboard","decks","AppBar","position","Toolbar","Typography","variant","DashboardPage","googleClientId","process","apiClient","axios","create","baseURL","withCredentials","interceptors","request","use","config","accessToken","localStorage","getItem","headers","authService","http","idToken","a","this","post","data","decodedAccessToken","setItem","JSON","stringify","get","useStyles","makeStyles","theme","backDrop","zIndex","appBar","loginSection","backgroundColor","palette","primary","dark","color","contrastText","padding","spacing","display","flexDirection","alignItems","gap","HomePage","classes","useState","loggingIn","setLoggingIn","updateAuthenticationStatus","useContext","Backdrop","className","open","CircularProgress","clientId","responseType","onRequest","onSuccess","res","logIn","tokenId","then","finally","onFailure","root","gridTemplateColumns","columnGap","CardList","cards","map","card","Fragment","sides","text","Divider","orientation","id","justifyContent","content","textAlign","typography","fontSize","h5","CardSide","clsx","CardContent","gridTemplateAreas","transformStyle","cardFlipTransition","transition","flip","transform","cardSide","gridArea","backfaceVisibility","cardBack","Card","frontText","backText","showBack","onFlip","onClick","height","width","hiddenCard","DeckStack","activeIndex","showCardBack","onFlipCard","activeCard","unmount","setUnmount","useLayoutEffect","positionIndicator","DeckStackControls","currentIndex","numberOfCards","onBack","onForward","IconButton","disabled","ArrowBack","align","ArrowForward","decksService","title","description","tags","margin","deckStack","maxWidth","deckStackContainer","section","progressBar","tagList","flexWrap","DeckPage","activeCardIndex","setActiveCardIndex","setShowCardBack","deckId","useParams","loading","setLoading","deck","setDeck","useEffect","findOne","console","log","sortedTags","useMemo","sort","state","length","Slider","value","max","valueLabelFormat","onChange","_event","tag","Chip","label","Router","isAuthenticated","exact","path","to","App","Date","parse","exp","authenticationStatus","setAuthenticatinStatus","Provider","update","Boolean","window","location","hostname","match","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.63a4ce08.chunk.js","sourcesContent":["import { createContext } from 'react';\nimport AuthenticationStatus from '../interfaces/authentication-status';\n\n/** Context for passing a callback to update authentication status. */\nexport const AuthenticationStatusUpdateContext = createContext<\n  (update: Partial<AuthenticationStatus>) => void\n>(() => {});\n","import { createContext } from 'react';\nimport AuthenticationStatus from '../interfaces/authentication-status';\n\nexport const AuthenticationStatusContext = createContext<AuthenticationStatus>({\n  loggedIn: false,\n});\n","const paths = {\n  home: '/',\n  dashboard: '/dashboard',\n  decks: '/decks',\n};\n\nexport default paths;\n","import { AppBar as MuiAppBar, Toolbar, Typography } from '@material-ui/core';\n\nexport default function AppBar() {\n  return (\n    <MuiAppBar position=\"sticky\">\n      <Toolbar>\n        <Typography variant=\"h6\">Basic Flashcards</Typography>\n      </Toolbar>\n    </MuiAppBar>\n  );\n}\n","import AppBar from '../components/app-bar';\n\nexport default function DashboardPage() {\n  return <AppBar />;\n}\n","export const googleClientId = process.env.REACT_APP_GOOGLE_CLIENT_ID ?? '';\n","import axios from 'axios';\n\nconst apiClient = axios.create({\n  baseURL: process.env.REACT_APP_API_URL,\n  withCredentials: true,\n});\n\n\n// Send the access token with requests if present\napiClient.interceptors.request.use((config) => {\n  const accessToken = localStorage.getItem('accessToken');\n  if (accessToken) {\n    config.headers['Authorization'] = `bearer ${accessToken}`;\n  }\n  return config;\n});\n\nexport default apiClient;\n","import { AxiosInstance } from 'axios';\nimport apiClient from '../../common/constants/api-client';\nimport { LogInResponse } from '../interfaces/log-in-response';\n\nexport class AuthService {\n  constructor(private http: AxiosInstance) {}\n\n  async logIn(idToken: string) {\n    const {\n      data: { accessToken, decodedAccessToken },\n    } = await this.http.post<LogInResponse>('/auth/access-tokens', {\n      idToken,\n    });\n    localStorage.setItem('accessToken', accessToken);\n    localStorage.setItem(\n      'accessTokenPayload',\n      JSON.stringify(decodedAccessToken)\n    );\n    return decodedAccessToken;\n  }\n\n  async verifyAccessToken(): Promise<boolean> {\n    try {\n      await this.http.get('/auth/token-info');\n      return true;\n    } catch {\n      return false;\n    }\n  }\n}\n\nexport const authService = new AuthService(apiClient);\n","import { makeStyles } from '@material-ui/core';\n\nconst useStyles = makeStyles((theme) => ({\n  backDrop: {\n    zIndex: theme.zIndex.appBar + 1,\n  },\n  loginSection: {\n    backgroundColor: theme.palette.primary.dark,\n    color: theme.palette.primary.contrastText,\n    padding: theme.spacing(4),\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    gap: theme.spacing(2),\n  },\n}));\n\nexport default useStyles;\n","import { Backdrop, CircularProgress, Typography } from '@material-ui/core';\nimport { useContext, useState } from 'react';\nimport { GoogleLogin, GoogleLoginResponse } from 'react-google-login';\nimport { googleClientId } from '../../auth/configs/auth.config';\nimport { AuthenticationStatusUpdateContext } from '../../auth/contexts/authentication-status-update.context';\nimport { authService } from '../../auth/services/auth.service';\nimport AppBar from '../components/app-bar';\nimport useStyles from './home.page.styles';\n\nexport default function HomePage() {\n  const classes = useStyles();\n  const [loggingIn, setLoggingIn] = useState(false);\n  const updateAuthenticationStatus = useContext(\n    AuthenticationStatusUpdateContext\n  );\n  return (\n    <div>\n      <Backdrop className={classes.backDrop} open={loggingIn}>\n        <CircularProgress color=\"inherit\" />\n      </Backdrop>\n      <AppBar />\n      <main>\n        <div className={classes.loginSection}>\n          <Typography variant=\"h1\">Log in to create decks.</Typography>\n          <GoogleLogin\n            clientId={googleClientId}\n            responseType=\"id_token\"\n            onRequest={() => setLoggingIn(true)}\n            onSuccess={(res) => {\n              authService\n                .logIn((res as GoogleLoginResponse).tokenId)\n                .then(() => updateAuthenticationStatus({ loggedIn: true }))\n                .finally(() => setLoggingIn(false));\n            }}\n            onFailure={() => setLoggingIn(false)}\n          />\n        </div>\n      </main>\n    </div>\n  );\n}\n","import { makeStyles } from '@material-ui/core';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'grid',\n    gridTemplateColumns: '2fr auto 3fr',\n    columnGap: theme.spacing(2),\n    gap: theme.spacing(3),\n  },\n}));\n\nexport default useStyles;\n","import { Divider, Typography } from '@material-ui/core';\nimport React from 'react';\nimport Card from '../../card/interfaces/card';\nimport useStyles from './card-list.styles';\n\ninterface CardListProps {\n  cards: Card[];\n}\n\nexport default function CardList({ cards }: CardListProps) {\n  const classes = useStyles();\n  return (\n    <div className={classes.root}>\n      {cards.map((card) => (\n        <React.Fragment key={card.id ?? JSON.stringify(card)}>\n          <Typography>{card.sides[0].text}</Typography>\n          <Divider orientation=\"vertical\" />\n          <Typography>{card.sides[1].text}</Typography>\n        </React.Fragment>\n      ))}\n    </div>\n  );\n}\n","import { makeStyles } from '@material-ui/core';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n  },\n  content: {\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    textAlign: 'center',\n    padding: theme.spacing(3),\n  },\n  typography: {\n    fontSize: theme.typography.h5.fontSize,\n  },\n}));\n\nexport default useStyles;\n","import { Card as MuiCard, CardContent, Typography } from '@material-ui/core';\nimport clsx from 'clsx';\nimport useStyles from './card-side.styles';\n\ninterface CardSideProps {\n  text: string;\n  className?: string;\n}\n\nexport default function CardSide({ text, className }: CardSideProps) {\n  const classes = useStyles();\n  return (\n    <MuiCard className={clsx(classes.root, className)}>\n      <CardContent className={classes.content}>\n        <Typography className={classes.typography}>{text}</Typography>\n      </CardContent>\n    </MuiCard>\n  );\n}\n","import { makeStyles } from '@material-ui/core';\n\nconst useStyles = makeStyles({\n  root: {\n    display: 'grid',\n    gridTemplateAreas: '\"main\"',\n    transformStyle: 'preserve-3d',\n  },\n  cardFlipTransition: {\n    transition: 'transform 0.3s',\n  },\n  flip: {\n    transform: 'rotateX(180deg)',\n  },\n  cardSide: {\n    gridArea: 'main',\n    backfaceVisibility: 'hidden',\n  },\n  cardBack: {\n    transform: 'rotateX(180deg)',\n  },\n});\n\nexport default useStyles;\n","import clsx from 'clsx';\nimport CardSide from './card-side';\nimport useStyles from './card.styles';\n\ninterface CardProps {\n  frontText: string;\n  backText: string;\n  showBack: boolean;\n  className?: string;\n  onFlip: () => void;\n}\n\nexport default function Card({\n  frontText,\n  backText,\n  showBack,\n  className,\n  onFlip,\n}: CardProps) {\n  const classes = useStyles();\n  return (\n    <div\n      className={clsx(\n        classes.root,\n        classes.cardFlipTransition,\n        showBack && classes.flip,\n        className\n      )}\n      onClick={onFlip}\n    >\n      <CardSide className={classes.cardSide} text={frontText} />\n      <CardSide\n        className={clsx(classes.cardSide, classes.cardBack)}\n        text={backText}\n      />\n    </div>\n  );\n}\n","import { makeStyles } from '@material-ui/core';\n\nconst useStyles = makeStyles({\n  card: {\n    height: '100%',\n    width: '100%',\n  },\n  hiddenCard: {\n    display: 'none',\n  },\n});\n\nexport default useStyles;\n","import { useLayoutEffect, useState } from 'react';\nimport CardComponent from '../../card/components/card';\nimport Card from '../../card/interfaces/card';\nimport useStyles from './deck-stack.styles';\n\ninterface DeckStackProps {\n  cards: Card[];\n  activeIndex: number;\n  showCardBack: boolean;\n  className?: string;\n  onFlipCard: () => void;\n}\n\nexport default function DeckStack({\n  cards,\n  activeIndex,\n  showCardBack,\n  className,\n  onFlipCard,\n}: DeckStackProps) {\n  const activeCard = cards[activeIndex];\n  const classes = useStyles();\n\n  // Unmount the Card component each time the active card changes\n  const [unmount, setUnmount] = useState(false);\n\n  useLayoutEffect(() => {\n    setUnmount(true);\n  }, [activeIndex]);\n\n  useLayoutEffect(() => {\n    if (unmount) {\n      setUnmount(false);\n    }\n  }, [unmount]);\n\n  if (!activeCard) {\n    return (\n      <div className={className}>\n        {!unmount && (\n          <CardComponent\n            className={classes.card}\n            frontText=\"\"\n            backText=\"\"\n            showBack={false}\n            onFlip={() => {}}\n          />\n        )}\n      </div>\n    );\n  }\n  // return (\n  //   <div className={className}>\n  //     {!unmount && activeCard ? (\n  //       <CardComponent\n  //         className={classes.card}\n  //         frontText={activeCard.sides[0].text}\n  //         backText={activeCard.sides[1].text}\n  //         showBack={showCardBack}\n  //         onFlip={onFlipCard}\n  //       />\n  //     ) : (\n  //       placeholder\n  //     )}\n  //   </div>\n  // );\n\n  return (\n    <div className={className}>\n      {!unmount && (\n        <CardComponent\n          className={classes.card}\n          frontText={activeCard.sides[0].text}\n          backText={activeCard.sides[1].text}\n          showBack={showCardBack}\n          onFlip={onFlipCard}\n        />\n      )}\n    </div>\n  );\n}\n","import { makeStyles } from '@material-ui/core';\n\nconst useStyles = makeStyles({\n  root: {\n    display: 'flex',\n    alignItems: 'center',\n  },\n  positionIndicator: {\n    width: '10ch',\n  },\n});\n\nexport default useStyles;\n","import { IconButton, Typography } from '@material-ui/core';\nimport { ArrowBack, ArrowForward } from '@material-ui/icons';\nimport useStyles from './deck-stack-controls.styles';\n\ninterface DeckStackControlsProps {\n  currentIndex: number;\n  numberOfCards: number;\n  onBack: () => void;\n  onForward: () => void;\n}\n\nexport default function DeckStackControls({\n  currentIndex,\n  numberOfCards,\n  onBack,\n  onForward,\n}: DeckStackControlsProps) {\n  const classes = useStyles();\n  return (\n    <div className={classes.root}>\n      <IconButton\n        onClick={onBack}\n        disabled={currentIndex === 0 || numberOfCards === 0}\n      >\n        <ArrowBack />\n      </IconButton>\n      <div>\n        <Typography\n          variant=\"subtitle2\"\n          align=\"center\"\n          className={classes.positionIndicator}\n        >{`${\n          numberOfCards > 0 ? currentIndex + 1 : 0\n        }/${numberOfCards}`}</Typography>\n      </div>\n\n      <IconButton\n        onClick={onForward}\n        disabled={currentIndex === numberOfCards - 1 || numberOfCards === 0}\n      >\n        <ArrowForward />\n      </IconButton>\n    </div>\n  );\n}\n","import { AxiosInstance } from 'axios';\nimport apiClient from '../../common/constants/api-client';\nimport Deck from '../interfaces/deck';\nimport FindOneDeckResponse from '../interfaces/find-one-deck-response';\n\nexport class DecksService {\n  constructor(private http: AxiosInstance) {}\n\n  async findOne(id: string): Promise<Deck | null> {\n    const { data } = await this.http.get<FindOneDeckResponse>(`/decks/${id}`);\n    const { title, description } = data;\n    return {\n      title,\n      description,\n      cards: data.cards.map((card) => ({\n        sides: [{ text: card.frontText }, { text: card.backText }],\n      })),\n      tags: [],\n    };\n  }\n}\n\nexport const decksService = new DecksService(apiClient);\n","import { makeStyles } from '@material-ui/core';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    flexDirection: 'column',\n    gap: theme.spacing(2),\n    margin: theme.spacing(3),\n  },\n  deckStack: {\n    height: 280,\n    width: '100%',\n    maxWidth: 397,\n  },\n  deckStackContainer: {\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n  },\n  section: {\n    display: 'flex',\n    flexDirection: 'column',\n    gap: theme.spacing(1),\n  },\n  progressBar: {\n    width: '100%',\n    maxWidth: 400,\n  },\n  tagList: {\n    display: 'flex',\n    flexWrap: 'wrap',\n    gap: theme.spacing(0.5),\n  },\n}));\n\nexport default useStyles;\n","import { Chip, Slider, Typography } from '@material-ui/core';\nimport { useEffect, useLayoutEffect, useMemo, useState } from 'react';\nimport { useParams } from 'react-router';\nimport AppBar from '../../dashboard/components/app-bar';\nimport CardList from '../components/card-list';\nimport DeckStack from '../components/deck-stack';\nimport DeckStackControls from '../components/deck-stack-controls';\nimport Deck from '../interfaces/deck';\nimport { decksService } from '../services/decks.service';\nimport useStyles from './deck.page.styles';\n\nexport default function DeckPage() {\n  const classes = useStyles();\n  const [activeCardIndex, setActiveCardIndex] = useState(0);\n  const [showCardBack, setShowCardBack] = useState(false);\n  const { id: deckId } = useParams<{ id: string }>();\n  const [loading, setLoading] = useState(true);\n\n  const [deck, setDeck] = useState<Deck | null>(null);\n\n  useEffect(() => {\n    setLoading(true);\n    decksService\n      .findOne(deckId)\n      .then((deck) => setDeck(deck))\n      .finally(() => setLoading(false));\n  }, [deckId]);\n\n  decksService.findOne(deckId).then(console.log);\n\n  // Make sure the front of the card is showing when moving to another\n  useLayoutEffect(() => {\n    setShowCardBack(false);\n  }, [activeCardIndex]);\n\n  // Alphabetize deck tags\n  const sortedTags = useMemo(() => (deck?.tags ? [...deck.tags].sort() : []), [\n    deck?.tags,\n  ]);\n\n  return (\n    <div>\n      <AppBar />\n      {!loading && deck && (\n        <div className={classes.root}>\n          {/* Deck */}\n          <section className={classes.section}>\n            <Typography variant=\"h4\">{deck.title}</Typography>\n            <div className={classes.deckStackContainer}>\n              <DeckStack\n                className={classes.deckStack}\n                cards={deck.cards}\n                activeIndex={activeCardIndex}\n                showCardBack={showCardBack}\n                onFlipCard={() => setShowCardBack((state) => !state)}\n              />\n              <DeckStackControls\n                currentIndex={activeCardIndex}\n                numberOfCards={deck.cards.length}\n                onBack={() => {\n                  setActiveCardIndex((state) => state - 1);\n                }}\n                onForward={() => {\n                  setActiveCardIndex((state) => state + 1);\n                }}\n              />\n              <Slider\n                className={classes.progressBar}\n                value={activeCardIndex}\n                max={deck.cards.length - 1}\n                valueLabelFormat={(value) => value + 1}\n                onChange={(_event, value) =>\n                  setActiveCardIndex(value as number)\n                }\n              />\n            </div>\n          </section>\n          {/* Tag list */}\n          <section className={classes.section}>\n            <Typography variant=\"h5\">Tags</Typography>\n            <div className={classes.tagList}>\n              {sortedTags.map((tag) => (\n                <Chip key={tag} label={tag} variant=\"outlined\" />\n              ))}\n            </div>\n          </section>\n          {/* Term list */}\n          <section className={classes.section}>\n            <Typography variant=\"h5\">Terms</Typography>\n            <CardList cards={deck.cards} />\n          </section>\n        </div>\n      )}\n    </div>\n  );\n}\n","import { HashRouter, Redirect, Route, Switch } from 'react-router-dom';\nimport paths from './common/constants/paths';\nimport DashboardPage from './dashboard/pages/dashboard.page';\nimport HomePage from './dashboard/pages/home.page';\nimport DeckPage from './deck/pages/deck.page';\n\ninterface RouterProps {\n  isAuthenticated?: boolean;\n}\n\nexport default function Router({ isAuthenticated }: RouterProps) {\n  return (\n    <HashRouter>\n      <Switch>\n        <Route exact path={paths.home}>\n          {!isAuthenticated ? <HomePage /> : <Redirect to={paths.dashboard} />}\n        </Route>\n        <Route path={paths.dashboard}>\n          <DashboardPage />\n        </Route>\n        <Route path={`${paths.decks}/:id`}>\n          <DeckPage />\n        </Route>\n      </Switch>\n    </HashRouter>\n  );\n}\n","import { useState } from 'react';\nimport { AuthenticationStatusUpdateContext } from './auth/contexts/authentication-status-update.context';\nimport { AuthenticationStatusContext } from './auth/contexts/authentication-status.context';\nimport AuthenticationStatus from './auth/interfaces/authentication-status';\nimport { LogInResponse } from './auth/interfaces/log-in-response';\nimport Router from './router';\n\nexport default function App() {\n  const [authenticationStatus, setAuthenticatinStatus] = useState({\n    loggedIn:\n      new Date(\n        (JSON.parse(\n          localStorage.getItem('accessTokenPayload') ?? '{\"exp\": 0}'\n        ) as LogInResponse['decodedAccessToken']).exp * 1000\n      ) > new Date(),\n  });\n\n  const updateAuthenticationStatus = (\n    update: Partial<AuthenticationStatus>\n  ) => {\n    setAuthenticatinStatus((state) => ({ ...state, ...update }));\n  };\n\n  return (\n    <AuthenticationStatusContext.Provider value={authenticationStatus}>\n      <AuthenticationStatusUpdateContext.Provider\n        value={updateAuthenticationStatus}\n      >\n        <Router isAuthenticated={authenticationStatus.loggedIn} />\n      </AuthenticationStatusUpdateContext.Provider>\n    </AuthenticationStatusContext.Provider>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { StrictMode } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
{"version":3,"sources":["deck/services/decks.service.ts","common/constants/snackbar.ts","common/hooks/use-unique-id.tsx","deck/pages/add-deck.page.styles.tsx","deck/components/edit-card-tile.styles.tsx","deck/components/edit-card-tile.tsx","deck/components/edit-deck-form.styles.tsx","deck/components/edit-deck-form.tsx","deck/pages/add-deck.page.tsx"],"names":["decksService","http","a","title","description","visibility","cards","this","post","authorId","authService","getCurrentUser","map","sides","frontText","text","backText","data","id","get","findOneDeckResponseToDeck","params","decks","count","put","cardId","delete","apiClient","card","tags","autoHideDuration","uniqueIdNumber","useUniqueId","useRef","current","useStyles","makeStyles","theme","backdrop","zIndex","appBar","root","display","flexDirection","gap","spacing","padding","header","justifyContent","textFieldContainer","gridTemplateColumns","breakpoints","down","gridTemplateRows","actionArea","EditCardTileInner","props","index","variant","defaultTerm","defaultDefinition","termError","definitionError","removeDisabled","moveUpDisabled","moveDownDisabled","onRemove","onMove","register","classes","draggableId","handleRemove","useCallback","handleMoveUp","handleMoveDown","provided","Paper","className","draggableProps","innerRef","Typography","component","aria-label","dragHandleProps","style","height","DragHandle","TextField","label","required","multiline","defaultValue","inputProps","error","undefined","helperText","IconButton","onClick","disabled","Delete","ArrowUpward","ArrowDownward","EditCardTile","memo","form","marginTop","marginBottom","generalInfoContainer","cardList","saveButtonContainer","editCardTileContainer","paddingTop","schema","yup","shape","max","oneOf","of","EditDeckForm","defaultValues","onSubmit","useForm","resolver","yupResolver","control","errors","formState","handleSubmit","useFieldArray","name","keyName","append","fields","move","remove","handleDragEnd","source","destination","droppableId","noValidate","message","select","MenuItem","value","onDragEnd","ref","droppableProps","key","length","placeholder","Button","fullWidth","startIcon","Add","type","color","AddDeckPage","useState","submitting","setSubmitting","history","useHistory","showSnackbar","setShowsSnackbar","snackbarMessage","setSnackbarMessage","open","create","then","goBack","catch","onClose"],"mappings":"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","file":"static/js/13.53cf0045.chunk.js","sourcesContent":["import { AxiosInstance } from 'axios';\nimport { authService } from '../../auth/services/auth.service';\nimport apiClient from '../../common/constants/api-client';\nimport Deck from '../interfaces/deck';\nimport { FindAllDecksParams } from '../interfaces/find-all-decks-params';\nimport { FindAllDecksResponse } from '../interfaces/find-all-decks-response';\nimport FindOneDeckResponse from '../interfaces/find-one-deck-response';\n\nexport class DecksService {\n  constructor(private http: AxiosInstance) {}\n\n  async create({ title, description, visibility, cards }: Deck) {\n    const { data } = await this.http.post('/decks', {\n      authorId: authService.getCurrentUser(),\n      title,\n      description,\n      visibility,\n      cards: cards.map(\n        ({ sides: [{ text: frontText }, { text: backText }] }) => ({\n          frontText,\n          backText,\n        })\n      ),\n    });\n    return data;\n  }\n\n  async findOne(id: string): Promise<Deck | null> {\n    const { data } = await this.http.get<FindOneDeckResponse>(`/decks/${id}`);\n    return findOneDeckResponseToDeck(data);\n  }\n\n  async findAll(\n    params: FindAllDecksParams\n  ): Promise<{ decks: Deck[]; count: number }> {\n    const { data } = await this.http.get<FindAllDecksResponse>(`/decks`, {\n      params,\n    });\n\n    return {\n      decks: data.decks.map(findOneDeckResponseToDeck),\n      count: data.count,\n    };\n  }\n\n  async update({ id, title, description, visibility, cards }: Deck) {\n    const { data } = await this.http.put(`/decks/${id}`, {\n      authorId: authService.getCurrentUser(),\n      title,\n      description,\n      visibility,\n      cards: cards.map(\n        ({ id: cardId, sides: [{ text: frontText }, { text: backText }] }) => ({\n          id: cardId,\n          frontText,\n          backText,\n        })\n      ),\n    });\n    return data;\n  }\n\n  async remove(id: string) {\n    return this.http.delete(`/decks/${id}`);\n  }\n}\n\nexport const decksService = new DecksService(apiClient);\n\nfunction findOneDeckResponseToDeck(data: FindOneDeckResponse): Deck {\n  const { id, authorId, title, description, visibility } = data;\n  return {\n    id,\n    authorId,\n    title,\n    description,\n    visibility,\n    cards: data.cards.map((card) => ({\n      id: card.id,\n      sides: [{ text: card.frontText }, { text: card.backText }],\n    })),\n    tags: [],\n  };\n}\n","export const autoHideDuration = 6000;\n","import { useRef } from 'react';\n\nlet uniqueIdNumber = 0;\n\nexport default function useUniqueId() {\n  const uniqueId = useRef(`unique-id-${uniqueIdNumber++}`);\n  return uniqueId.current;\n}\n","import { makeStyles } from '@material-ui/core';\n\nconst useStyles = makeStyles((theme) => ({\n  backdrop: {\n    zIndex: theme.zIndex.appBar + 1,\n  },\n}));\n\nexport default useStyles;\n","import { makeStyles } from '@material-ui/core';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    flexDirection: 'column',\n    gap: theme.spacing(1),\n    padding: theme.spacing(2),\n  },\n  header: {\n    display: 'flex',\n    justifyContent: 'space-between',\n  },\n  textFieldContainer: {\n    display: 'grid',\n    gridTemplateColumns: '1fr 1fr',\n    gap: theme.spacing(2),\n    [theme.breakpoints.down('xs')]: {\n      gridTemplateColumns: '1fr',\n      gridTemplateRows: '1fr 1fr',\n    },\n  },\n  actionArea: {\n    display: 'flex',\n    justifyContent: 'flex-end',\n  },\n}));\nexport default useStyles;\n","import {\n  IconButton,\n  Paper,\n  TextField,\n  TextFieldProps,\n  Typography,\n} from '@material-ui/core';\nimport {\n  ArrowDownward,\n  ArrowUpward,\n  Delete,\n  DragHandle,\n} from '@material-ui/icons';\nimport { memo, useCallback } from 'react';\nimport { Draggable } from 'react-beautiful-dnd';\nimport { UseFormRegister } from 'react-hook-form';\nimport useUniqueId from '../../common/hooks/use-unique-id';\nimport useStyles from './edit-card-tile.styles';\nimport { FormValues } from './edit-deck-form';\n\nexport interface EditCardTileProps {\n  index: number;\n  variant?: TextFieldProps['variant'];\n  defaultTerm: string;\n  defaultDefinition: string;\n  termError?: string;\n  definitionError?: string;\n  removeDisabled?: boolean;\n  moveUpDisabled?: boolean;\n  moveDownDisabled?: boolean;\n  onRemove: (index: number) => void;\n  onMove: (source: number, destination: number) => void;\n  register: UseFormRegister<FormValues>;\n}\n\nexport function EditCardTileInner(props: EditCardTileProps) {\n  const {\n    index,\n    variant,\n    defaultTerm,\n    defaultDefinition,\n    termError,\n    definitionError,\n    removeDisabled,\n    moveUpDisabled,\n    moveDownDisabled,\n    onRemove,\n    onMove,\n    register,\n  } = props;\n  const classes = useStyles();\n\n  const draggableId = useUniqueId();\n\n  const handleRemove = useCallback(() => onRemove(index), [index, onRemove]);\n\n  const handleMoveUp = useCallback(\n    () => onMove(index, index - 1),\n    [index, onMove]\n  );\n\n  const handleMoveDown = useCallback(\n    () => onMove(index, index + 1),\n    [index, onMove]\n  );\n\n  return (\n    <Draggable draggableId={draggableId} index={index}>\n      {(provided) => (\n        <Paper\n          className={classes.root}\n          {...provided.draggableProps}\n          innerRef={provided.innerRef}\n        >\n          <div className={classes.header}>\n            <Typography variant=\"h5\" component=\"div\">{`Card ${\n              index + 1\n            }`}</Typography>\n            <div\n              aria-label=\"card reorder drag handle\"\n              {...provided.dragHandleProps}\n              style={{ height: '24px' }}\n            >\n              <DragHandle />\n            </div>\n          </div>\n          <div className={classes.textFieldContainer}>\n            <TextField\n              label=\"Term\"\n              required\n              multiline\n              variant={variant}\n              defaultValue={defaultTerm}\n              inputProps={{\n                'aria-label': 'term',\n                ...register(`cards.${index}.sides.0.text` as const),\n              }}\n              error={termError !== undefined}\n              helperText={termError}\n            />\n            <TextField\n              label=\"Definition\"\n              required\n              multiline\n              variant={variant}\n              defaultValue={defaultDefinition}\n              inputProps={{\n                'aria-label': 'definition',\n                ...register(`cards.${index}.sides.1.text` as const),\n              }}\n              error={definitionError !== undefined}\n              helperText={definitionError}\n            />\n          </div>\n          <div className={classes.actionArea}>\n            <IconButton\n              aria-label=\"delete\"\n              onClick={handleRemove}\n              disabled={removeDisabled}\n            >\n              <Delete />\n            </IconButton>\n            <IconButton\n              aria-label=\"move up\"\n              onClick={handleMoveUp}\n              disabled={moveUpDisabled}\n            >\n              <ArrowUpward />\n            </IconButton>\n            <IconButton\n              aria-label=\"move down\"\n              onClick={handleMoveDown}\n              disabled={moveDownDisabled}\n            >\n              <ArrowDownward />\n            </IconButton>\n          </div>\n        </Paper>\n      )}\n    </Draggable>\n  );\n}\n\nconst EditCardTile = memo(EditCardTileInner);\nexport default EditCardTile;\n","import { makeStyles } from '@material-ui/core';\n\nconst useStyles = makeStyles((theme) => ({\n  form: {\n    display: 'flex',\n    flexDirection: 'column',\n    gap: theme.spacing(3),\n    marginTop: theme.spacing(3),\n    marginBottom: theme.spacing(3),\n  },\n  generalInfoContainer: {\n    display: 'flex',\n    flexDirection: 'column',\n    gap: theme.spacing(2),\n  },\n  cardList: {\n    display: 'flex',\n    flexDirection: 'column',\n    gap: theme.spacing(2),\n  },\n  saveButtonContainer: {\n    display: 'flex',\n    justifyContent: 'flex-end',\n  },\n  editCardTileContainer: {\n    paddingTop: theme.spacing(2),\n  },\n}));\n\nexport default useStyles;\n","import { yupResolver } from '@hookform/resolvers/yup';\nimport { Button, MenuItem, TextField, TextFieldProps } from '@material-ui/core';\nimport { Add } from '@material-ui/icons';\nimport { useCallback } from 'react';\nimport { DragDropContext, Droppable, DropResult } from 'react-beautiful-dnd';\nimport { useFieldArray, useForm } from 'react-hook-form';\nimport * as yup from 'yup';\nimport Card from '../../card/interfaces/card';\nimport useUniqueId from '../../common/hooks/use-unique-id';\nimport { DeckVisibility } from '../types/deck-visibility';\nimport EditCardTile from './edit-card-tile';\nimport useStyles from './edit-deck-form.styles';\n\nexport type FormValues = {\n  title: string;\n  description: string;\n  visibility: DeckVisibility;\n  cards: Card[];\n};\n\nconst schema = yup.object().shape({\n  title: yup.string().label('Title').required().max(255),\n  description: yup.string().label('Description').max(4096),\n  visibility: yup.string().label('Visibility').oneOf(['PRIVATE', 'PUBLIC']),\n  cards: yup.array().of(\n    yup.object().shape({\n      sides: yup.array().of(\n        yup.object().shape({\n          text: yup.string().label('This').required().max(4096),\n        })\n      ),\n    })\n  ),\n});\n\ninterface EditDeckFormProps {\n  defaultValues?: FormValues;\n  variant?: TextFieldProps['variant'];\n  onSubmit: (value: FormValues) => void;\n}\n\nexport default function EditDeckForm({\n  defaultValues,\n  variant,\n  onSubmit,\n}: EditDeckFormProps) {\n  const classes = useStyles();\n\n  const {\n    control,\n    formState: { errors },\n    handleSubmit,\n    register,\n  } = useForm<FormValues>({\n    defaultValues,\n    resolver: yupResolver(schema),\n  });\n\n  const { append, fields, move, remove } = useFieldArray({\n    control,\n    name: 'cards',\n    keyName: 'key', // A Card already has an id field\n  });\n\n  const handleDragEnd = useCallback(\n    ({ source, destination }: DropResult) => {\n      if (\n        !destination ||\n        (destination.droppableId === source.droppableId &&\n          destination.index === source.index)\n      ) {\n        return;\n      }\n      move(source.index, destination.index);\n    },\n    [move]\n  );\n\n  const droppableId = useUniqueId();\n\n  return (\n    <form className={classes.form} noValidate onSubmit={handleSubmit(onSubmit)}>\n      <div className={classes.generalInfoContainer}>\n        <TextField\n          label=\"Title\"\n          required\n          variant={variant}\n          defaultValue=\"\"\n          inputProps={{ 'aria-label': 'title', ...register('title') }}\n          error={errors.title !== undefined}\n          helperText={errors.title?.message}\n        />\n        <TextField\n          label=\"Description\"\n          variant={variant}\n          defaultValue=\"\"\n          inputProps={{\n            'aria-label': 'description',\n            ...register('description'),\n          }}\n          error={errors.description !== undefined}\n          helperText={errors.description?.message}\n        />\n        <TextField\n          label=\"Visibility\"\n          select\n          variant={variant}\n          defaultValue={defaultValues?.visibility ?? 'PRIVATE'}\n          inputProps={{ 'aria-label': 'visibility', ...register('visibility') }}\n          error={errors.visibility !== undefined}\n          helperText={errors.visibility?.message}\n        >\n          <MenuItem value=\"PRIVATE\">Private</MenuItem>\n          <MenuItem value=\"PUBLIC\">Public</MenuItem>\n        </TextField>\n      </div>\n\n      <DragDropContext onDragEnd={handleDragEnd}>\n        <Droppable droppableId={droppableId}>\n          {(provided) => (\n            <div\n              className={classes.cardList}\n              ref={provided.innerRef}\n              {...provided.droppableProps}\n            >\n              {fields.map(\n                (\n                  {\n                    key,\n                    sides: [{ text: defaultTerm }, { text: defaultDefinition }],\n                  },\n                  index\n                ) => (\n                  <EditCardTile\n                    key={key}\n                    index={index}\n                    variant={variant}\n                    defaultTerm={defaultTerm}\n                    defaultDefinition={defaultDefinition}\n                    termError={errors.cards?.[index]?.sides?.[0]?.text?.message}\n                    definitionError={\n                      errors.cards?.[index]?.sides?.[1]?.text?.message\n                    }\n                    onRemove={remove}\n                    onMove={move}\n                    removeDisabled={fields.length <= 1}\n                    moveUpDisabled={index === 0}\n                    moveDownDisabled={index >= fields.length - 1}\n                    register={register}\n                  />\n                )\n              )}\n              {provided.placeholder}\n            </div>\n          )}\n        </Droppable>\n      </DragDropContext>\n\n      <Button\n        variant=\"outlined\"\n        fullWidth\n        startIcon={<Add />}\n        onClick={() => append({ sides: [{ text: '' }, { text: '' }] })}\n      >\n        Add card\n      </Button>\n      <div className={classes.saveButtonContainer}>\n        <Button type=\"submit\" variant=\"contained\" color=\"primary\">\n          Save\n        </Button>\n      </div>\n    </form>\n  );\n}\n","import {\n  Backdrop,\n  CircularProgress,\n  Container,\n  Snackbar,\n} from '@material-ui/core';\nimport { useState } from 'react';\nimport { useHistory } from 'react-router';\nimport { autoHideDuration } from '../../common/constants/snackbar';\nimport EditDeckForm from '../components/edit-deck-form';\nimport { decksService } from '../services/decks.service';\nimport useStyles from './add-deck.page.styles';\n\nexport default function AddDeckPage() {\n  const classes = useStyles();\n\n  const [submitting, setSubmitting] = useState(false);\n  const history = useHistory();\n\n  const [showSnackbar, setShowsSnackbar] = useState(false);\n  const [snackbarMessage, setSnackbarMessage] = useState('');\n\n  return (\n    <>\n      <Backdrop open={submitting} className={classes.backdrop}>\n        <CircularProgress color=\"inherit\" />\n      </Backdrop>\n      <Container>\n        <EditDeckForm\n          variant=\"outlined\"\n          defaultValues={{\n            title: '',\n            description: '',\n            visibility: 'PRIVATE',\n            cards: [{ sides: [{ text: '' }, { text: '' }] }],\n          }}\n          onSubmit={(value) => {\n            setSubmitting(true);\n            decksService\n              .create({ tags: [], ...value })\n              .then(() => history.goBack())\n              .catch(() => {\n                setSnackbarMessage('Failed to save deck.');\n                setShowsSnackbar(true);\n                setSubmitting(false);\n              });\n          }}\n        />\n      </Container>\n      <Snackbar\n        open={showSnackbar}\n        message={snackbarMessage}\n        autoHideDuration={autoHideDuration}\n        onClose={() => setShowsSnackbar(false)}\n      />\n    </>\n  );\n}\n"],"sourceRoot":""}
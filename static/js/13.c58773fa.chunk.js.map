{"version":3,"sources":["deck/services/decks.service.ts","common/constants/snackbar.ts","deck/pages/add-deck.page.styles.tsx","deck/components/edit-deck-form.styles.tsx","deck/components/edit-deck-form.tsx","deck/pages/add-deck.page.tsx"],"names":["decksService","http","a","title","description","visibility","cards","this","post","authorId","authService","getCurrentUser","map","sides","frontText","text","backText","data","id","get","findOneDeckResponseToDeck","params","decks","count","put","cardId","delete","apiClient","card","tags","autoHideDuration","useStyles","makeStyles","theme","backdrop","zIndex","appBar","form","display","flexDirection","gap","spacing","marginTop","marginBottom","generalInfoContainer","cardList","saveButtonContainer","justifyContent","editCardTile","padding","editCardTileFieldContainer","gridTemplateColumns","editCardTileActionArea","editCardTileContainer","paddingTop","schema","yup","shape","label","required","max","oneOf","of","EditDeckForm","defaultValues","variant","onSubmit","classes","useForm","resolver","yupResolver","control","errors","formState","getValues","handleSubmit","register","useFieldArray","name","keyName","append","fields","move","remove","className","noValidate","undefined","window","scrollTo","top","Object","values","length","Alert","color","TextField","defaultValue","inputProps","error","helperText","message","select","MenuItem","value","useWindowScroll","computeItemKey","index","key","itemContent","Paper","Typography","component","IconButton","aria-label","onClick","disabled","Delete","ArrowUpward","ArrowDownward","Button","fullWidth","startIcon","Add","type","AddDeckPage","useState","submitting","setSubmitting","history","useHistory","showSnackbar","setShowsSnackbar","snackbarMessage","setSnackbarMessage","open","create","then","goBack","catch","onClose"],"mappings":"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","file":"static/js/13.c58773fa.chunk.js","sourcesContent":["import { AxiosInstance } from 'axios';\nimport { authService } from '../../auth/services/auth.service';\nimport apiClient from '../../common/constants/api-client';\nimport Deck from '../interfaces/deck';\nimport { FindAllDecksParams } from '../interfaces/find-all-decks-params';\nimport { FindAllDecksResponse } from '../interfaces/find-all-decks-response';\nimport FindOneDeckResponse from '../interfaces/find-one-deck-response';\n\nexport class DecksService {\n  constructor(private http: AxiosInstance) {}\n\n  async create({ title, description, visibility, cards }: Deck) {\n    const { data } = await this.http.post('/decks', {\n      authorId: authService.getCurrentUser(),\n      title,\n      description,\n      visibility,\n      cards: cards.map(\n        ({ sides: [{ text: frontText }, { text: backText }] }) => ({\n          frontText,\n          backText,\n        })\n      ),\n    });\n    return data;\n  }\n\n  async findOne(id: string): Promise<Deck | null> {\n    const { data } = await this.http.get<FindOneDeckResponse>(`/decks/${id}`);\n    return findOneDeckResponseToDeck(data);\n  }\n\n  async findAll(\n    params: FindAllDecksParams\n  ): Promise<{ decks: Deck[]; count: number }> {\n    const { data } = await this.http.get<FindAllDecksResponse>(`/decks`, {\n      params,\n    });\n\n    return {\n      decks: data.decks.map(findOneDeckResponseToDeck),\n      count: data.count,\n    };\n  }\n\n  async update({ id, title, description, visibility, cards }: Deck) {\n    const { data } = await this.http.put(`/decks/${id}`, {\n      authorId: authService.getCurrentUser(),\n      title,\n      description,\n      visibility,\n      cards: cards.map(\n        ({ id: cardId, sides: [{ text: frontText }, { text: backText }] }) => ({\n          id: cardId,\n          frontText,\n          backText,\n        })\n      ),\n    });\n    return data;\n  }\n\n  async remove(id: string) {\n    return this.http.delete(`/decks/${id}`);\n  }\n}\n\nexport const decksService = new DecksService(apiClient);\n\nfunction findOneDeckResponseToDeck(data: FindOneDeckResponse): Deck {\n  const { id, authorId, title, description, visibility } = data;\n  return {\n    id,\n    authorId,\n    title,\n    description,\n    visibility,\n    cards: data.cards.map((card) => ({\n      id: card.id,\n      sides: [{ text: card.frontText }, { text: card.backText }],\n    })),\n    tags: [],\n  };\n}\n","export const autoHideDuration = 6000;\n","import { makeStyles } from '@material-ui/core';\n\nconst useStyles = makeStyles((theme) => ({\n  backdrop: {\n    zIndex: theme.zIndex.appBar + 1,\n  },\n}));\n\nexport default useStyles;\n","import { makeStyles } from '@material-ui/core';\n\nconst useStyles = makeStyles((theme) => ({\n  form: {\n    display: 'flex',\n    flexDirection: 'column',\n    gap: theme.spacing(3),\n    marginTop: theme.spacing(3),\n    marginBottom: theme.spacing(3),\n  },\n  generalInfoContainer: {\n    display: 'flex',\n    flexDirection: 'column',\n    gap: theme.spacing(2),\n  },\n  cardList: {\n    display: 'flex',\n    flexDirection: 'column',\n    gap: theme.spacing(2),\n  },\n  saveButtonContainer: {\n    display: 'flex',\n    justifyContent: 'flex-end',\n  },\n  editCardTile: {\n    display: 'flex',\n    flexDirection: 'column',\n    gap: theme.spacing(1),\n    padding: theme.spacing(2),\n  },\n  editCardTileFieldContainer: {\n    display: 'grid',\n    gridTemplateColumns: '1fr 1fr',\n    gap: theme.spacing(2),\n  },\n  editCardTileActionArea: {\n    display: 'flex',\n    justifyContent: 'flex-end',\n  },\n  editCardTileContainer: {\n    paddingTop: theme.spacing(2),\n  },\n}));\n\nexport default useStyles;\n","import { yupResolver } from '@hookform/resolvers/yup';\nimport {\n  Button,\n  IconButton,\n  MenuItem,\n  Paper,\n  TextField,\n  TextFieldProps,\n  Typography,\n} from '@material-ui/core';\nimport { Add, ArrowDownward, ArrowUpward, Delete } from '@material-ui/icons';\nimport { Alert } from '@material-ui/lab';\nimport { SubmitErrorHandler, useFieldArray, useForm } from 'react-hook-form';\nimport { Virtuoso } from 'react-virtuoso';\nimport * as yup from 'yup';\nimport Card from '../../card/interfaces/card';\nimport { DeckVisibility } from '../types/deck-visibility';\nimport useStyles from './edit-deck-form.styles';\n\nexport type FormValues = {\n  title: string;\n  description: string;\n  visibility: DeckVisibility;\n  cards: Card[];\n};\n\nconst schema = yup.object().shape({\n  title: yup.string().label('Title').required().max(255),\n  description: yup.string().label('Description').max(4096),\n  visibility: yup.string().label('Visibility').oneOf(['PRIVATE', 'PUBLIC']),\n  cards: yup.array().of(\n    yup.object().shape({\n      sides: yup.array().of(\n        yup.object().shape({\n          text: yup.string().label('This').required().max(4096),\n        })\n      ),\n    })\n  ),\n});\n\ninterface EditDeckFormProps {\n  defaultValues?: FormValues;\n  variant?: TextFieldProps['variant'];\n  onSubmit: (value: FormValues) => void;\n}\n\nexport default function EditDeckForm({\n  defaultValues,\n  variant,\n  onSubmit,\n}: EditDeckFormProps) {\n  const classes = useStyles();\n\n  const {\n    control,\n    formState: { errors },\n    getValues,\n    handleSubmit,\n    register,\n  } = useForm<FormValues>({\n    defaultValues,\n    // reValidateMode: 'onBlur',\n    resolver: yupResolver(schema),\n  });\n  const { append, fields, move, remove } = useFieldArray({\n    control,\n    name: 'cards',\n    keyName: 'key', // A Card already has an id field\n  });\n  const onInvalid: SubmitErrorHandler<FormValues> = (errors) => {\n    if (\n      !errors.title &&\n      !errors.description &&\n      !errors.visibility &&\n      errors.cards !== undefined\n    ) {\n      window.scrollTo({ top: 0 });\n    }\n  };\n\n  return (\n    <form\n      className={classes.form}\n      noValidate\n      onSubmit={handleSubmit(onSubmit, onInvalid)}\n    >\n      {Object.values(errors).length > 0 && (\n        <Alert color=\"error\">Please correct all errors.</Alert>\n      )}\n      <div className={classes.generalInfoContainer}>\n        <TextField\n          label=\"Title\"\n          required\n          variant={variant}\n          defaultValue=\"\"\n          inputProps={{ 'aria-label': 'title', ...register('title') }}\n          error={errors.title !== undefined}\n          helperText={errors.title?.message}\n        />\n        <TextField\n          label=\"Description\"\n          variant={variant}\n          defaultValue=\"\"\n          inputProps={{\n            'aria-label': 'description',\n            ...register('description'),\n          }}\n          error={errors.description !== undefined}\n          helperText={errors.description?.message}\n        />\n        <TextField\n          label=\"Visibility\"\n          select\n          variant={variant}\n          defaultValue={defaultValues?.visibility ?? 'PRIVATE'}\n          inputProps={{ 'aria-label': 'visibility', ...register('visibility') }}\n          error={errors.visibility !== undefined}\n          helperText={errors.visibility?.message}\n        >\n          <MenuItem value=\"PRIVATE\">Private</MenuItem>\n          <MenuItem value=\"PUBLIC\">Public</MenuItem>\n        </TextField>\n      </div>\n\n      <Virtuoso\n        useWindowScroll\n        data={fields}\n        computeItemKey={(index) => fields[index].key}\n        itemContent={(index) => {\n          const { sides } = getValues('cards')[index];\n          return (\n            <div\n              className={index > 0 ? classes.editCardTileContainer : undefined}\n            >\n              <Paper className={classes.editCardTile}>\n                <Typography variant=\"h6\" component=\"div\">{`Card ${\n                  index + 1\n                }`}</Typography>\n                <div className={classes.editCardTileFieldContainer}>\n                  <TextField\n                    label=\"Term\"\n                    required\n                    variant={variant}\n                    defaultValue={sides[0].text}\n                    inputProps={{\n                      'aria-label': 'term',\n                      ...register(`cards.${index}.sides.0.text` as const),\n                    }}\n                    error={\n                      errors.cards?.[index]?.sides?.[0]?.text !== undefined\n                    }\n                    helperText={\n                      errors.cards?.[index]?.sides?.[0]?.text?.message\n                    }\n                  />\n                  <TextField\n                    label=\"Definition\"\n                    required\n                    variant={variant}\n                    defaultValue={sides[1].text}\n                    inputProps={{\n                      'aria-label': 'definition',\n                      ...register(`cards.${index}.sides.1.text` as const),\n                    }}\n                    error={\n                      errors.cards?.[index]?.sides?.[1]?.text !== undefined\n                    }\n                    helperText={\n                      errors.cards?.[index]?.sides?.[1]?.text?.message\n                    }\n                  />\n                </div>\n                <div className={classes.editCardTileActionArea}>\n                  <IconButton\n                    aria-label=\"delete\"\n                    onClick={() => remove(index)}\n                    disabled={fields.length <= 1}\n                  >\n                    <Delete />\n                  </IconButton>\n                  <IconButton\n                    aria-label=\"move up\"\n                    onClick={() => move(index, index - 1)}\n                    disabled={index <= 0}\n                  >\n                    <ArrowUpward />\n                  </IconButton>\n                  <IconButton\n                    aria-label=\"move down\"\n                    onClick={() => move(index, index + 1)}\n                    disabled={index >= fields.length - 1}\n                  >\n                    <ArrowDownward />\n                  </IconButton>\n                </div>\n              </Paper>\n            </div>\n          );\n        }}\n      />\n\n      <Button\n        variant=\"outlined\"\n        fullWidth\n        startIcon={<Add />}\n        onClick={() => append({ sides: [{ text: '' }, { text: '' }] })}\n      >\n        Add card\n      </Button>\n      <div className={classes.saveButtonContainer}>\n        <Button type=\"submit\" variant=\"contained\" color=\"primary\">\n          Save\n        </Button>\n      </div>\n    </form>\n  );\n}\n","import {\n  Backdrop,\n  CircularProgress,\n  Container,\n  Snackbar,\n} from '@material-ui/core';\nimport { useState } from 'react';\nimport { useHistory } from 'react-router';\nimport { autoHideDuration } from '../../common/constants/snackbar';\nimport EditDeckForm from '../components/edit-deck-form';\nimport { decksService } from '../services/decks.service';\nimport useStyles from './add-deck.page.styles';\n\nexport default function AddDeckPage() {\n  const classes = useStyles();\n\n  const [submitting, setSubmitting] = useState(false);\n  const history = useHistory();\n\n  const [showSnackbar, setShowsSnackbar] = useState(false);\n  const [snackbarMessage, setSnackbarMessage] = useState('');\n\n  return (\n    <>\n      <Backdrop open={submitting} className={classes.backdrop}>\n        <CircularProgress color=\"inherit\" />\n      </Backdrop>\n      <Container>\n        <EditDeckForm\n          variant=\"outlined\"\n          defaultValues={{\n            title: '',\n            description: '',\n            visibility: 'PRIVATE',\n            cards: [{ sides: [{ text: '' }, { text: '' }] }],\n          }}\n          onSubmit={(value) => {\n            setSubmitting(true);\n            decksService\n              .create({ tags: [], ...value })\n              .then(() => history.goBack())\n              .catch(() => {\n                setSnackbarMessage('Failed to save deck.');\n                setShowsSnackbar(true);\n                setSubmitting(false);\n              });\n          }}\n        />\n      </Container>\n      <Snackbar\n        open={showSnackbar}\n        message={snackbarMessage}\n        autoHideDuration={autoHideDuration}\n        onClose={() => setShowsSnackbar(false)}\n      />\n    </>\n  );\n}\n"],"sourceRoot":""}